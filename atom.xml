<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Azure XH</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-11T09:34:34.230Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>AzureXH</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>c++ static关键字</title>
    <link href="http://yoursite.com/2020/01/11/c++%20static%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>http://yoursite.com/2020/01/11/c++%20static%E5%85%B3%E9%94%AE%E5%AD%97/</id>
    <published>2020-01-11T08:57:15.000Z</published>
    <updated>2020-01-11T09:34:34.230Z</updated>
    
    <content type="html"><![CDATA[<p>摘抄至<a href="https://www.geeksforgeeks.org/static-keyword-cpp/" target="_blank" rel="noopener">geeksforgeeks</a></p><h2 id="函数中的静态变量"><a href="#函数中的静态变量" class="headerlink" title="函数中的静态变量"></a>函数中的静态变量</h2><p>当一个变量被声明为静态的时，它的空间就会被分配持续整个程序的生命周期</p><p>即使该函数被调用多次，静态变量的空间也只会被分配一次，并且该静态变量的值会一直持续到下一次函数调用</p><p>在实现协程或其他需要保存函数之前的状态的应用时会很有用</p><h2 id="类中的静态变量"><a href="#类中的静态变量" class="headerlink" title="类中的静态变量"></a>类中的静态变量</h2><p>当这些静态变量被分配了静态的存储空间后，他们只会被初始化一次</p><p>同一个类中的静态变量会被该类的所有实例共享</p><p>所以不会有不同实例对象有着不同的静态变量的值</p><p>并且由于这个原因，该静态变量不能够被构造器初始化(因为构造器构造的是实例对象，实例对象是共享的这些静态变量)</p><p>所以，类中的静态变量应该被用户，使用类名与范围解析运算符，显式地初始化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GfG</span> </span></span><br><span class="line"><span class="class">&#123;</span> </span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i; </span><br><span class="line">      </span><br><span class="line">    GfG() </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="comment">// Do nothing </span></span><br><span class="line">    &#125;; </span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="comment">//在这里初始化</span></span><br><span class="line"><span class="keyword">int</span> GfG::i = <span class="number">1</span>; </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    GfG obj; </span><br><span class="line">    <span class="comment">// prints value of i </span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; obj.i;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类的静态实例"><a href="#类的静态实例" class="headerlink" title="类的静态实例"></a>类的静态实例</h2><p>与静态变量一样，初始化后会在整个程序的生命周期存在</p><h2 id="类中的静态函数"><a href="#类中的静态函数" class="headerlink" title="类中的静态函数"></a>类中的静态函数</h2><p>静态成员函数只允许访问静态变量或其他的静态函数</p><p>可以被类直接引用，无需实例对象引用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;摘抄至&lt;a href=&quot;https://www.geeksforgeeks.org/static-keyword-cpp/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;geeksforgeeks&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;函数中的静态变量&quot;&gt;&lt;a 
      
    
    </summary>
    
    
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>c++ 迭代器</title>
    <link href="http://yoursite.com/2020/01/11/c++%20%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <id>http://yoursite.com/2020/01/11/c++%20%E8%BF%AD%E4%BB%A3%E5%99%A8/</id>
    <published>2020-01-11T06:46:02.000Z</published>
    <updated>2020-01-11T08:36:55.648Z</updated>
    
    <content type="html"><![CDATA[<p>摘抄于<a href="https://www.geeksforgeeks.org/iterators-c-stl/" target="_blank" rel="noopener">geeksforgeeks</a></p><p>迭代器用于指向<strong>STL容器</strong>的<strong>内存地址</strong>(类似于指针)</p><p>减少程序的复杂度和执行时间</p><h2 id="迭代器操作"><a href="#迭代器操作" class="headerlink" title="迭代器操作"></a>迭代器操作</h2><h3 id="begin"><a href="#begin" class="headerlink" title="begin()"></a>begin()</h3><p>用于返回容器的开始位置</p><h3 id="end"><a href="#end" class="headerlink" title="end()"></a>end()</h3><p>用于返回容器的结束位置的后一个位置</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化容器</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ar = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="comment">//声明容器的迭代器</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator ptr;</span><br><span class="line"><span class="comment">//遍历输出</span></span><br><span class="line"><span class="keyword">for</span>(ptr = ar.begin(); ptr &lt; ar.end(); ptr++)</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; *ptr &lt;&lt; <span class="string">" "</span>;     <span class="comment">//由于迭代器和指针类似，指向内存地址，需要解引用</span></span><br></pre></td></tr></table></figure><h3 id="advance"><a href="#advance" class="headerlink" title="advance()"></a>advance()</h3><p>用于增加迭代器位置</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ar = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator ptr = ar.begin();</span><br><span class="line"></span><br><span class="line">advance(ptr,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*ptr; <span class="comment">//结果为4</span></span><br></pre></td></tr></table></figure><h3 id="next"><a href="#next" class="headerlink" title="next()"></a>next()</h3><p>用于返回一个<strong>新的迭代器</strong>，将指向参数中提到的位置</p><h3 id="prev"><a href="#prev" class="headerlink" title="prev()"></a>prev()</h3><p>用于返回一个<strong>新的迭代器</strong>，将指向参数中指向的位置</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ar = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator ptr = ar.begin(); <span class="comment">//指向1</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator ftr = ar.end();   <span class="comment">//指向5后面的内存地址</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> it1 = next(ptr,<span class="number">3</span>); <span class="comment">//指向4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> it2 = prev(ftr,<span class="number">3</span>); <span class="comment">//将指向3</span></span><br></pre></td></tr></table></figure><h3 id="inserter"><a href="#inserter" class="headerlink" title="inserter()"></a>inserter()</h3><p>构建一个插入迭代器，指向要插入的结点</p><p>接受两个参数</p><ol><li>容器</li><li>元素要插入的位置的迭代器</li></ol><p>与copy函数搭配使用</p><h3 id="copy"><a href="#copy" class="headerlink" title="copy()"></a>copy()</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy(strt_iter1, end_iter1, strt_iter2);</span><br></pre></td></tr></table></figure><ul><li>strt_iter1：指向源容器的开始位置，开始复制的元素的位置</li><li>end_iter1：容器的结束位置，结束复制的元素位置的后一位</li><li>strt_iter2：目标容器的位置，元素复制的<strong>目标</strong>位置的前面</li><li>结果：将strt_iter1 到 end_iter1这一段元素 复制到strt_iter2位置的前面</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ar = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;; </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ar1 = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;;  </span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator ptr = ar.begin(); </span><br><span class="line"></span><br><span class="line"><span class="comment">//ptr指向ar中的4     </span></span><br><span class="line">advance(ptr, <span class="number">3</span>); </span><br><span class="line">      </span><br><span class="line"><span class="comment">// inserter返回ptr指向的ar中的位置 </span></span><br><span class="line"><span class="comment">// 将ar1复制到inserter指向的位置的前面</span></span><br><span class="line">copy(ar1.begin(), ar1.end(), inserter(ar,ptr)); </span><br><span class="line">      </span><br><span class="line"><span class="comment">// Displaying new vector elements </span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"The new vector after inserting elements is : "</span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> &amp;x : ar)  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">" "</span>; <span class="comment">//输出 1 2 3 10 20 30 4 5</span></span><br><span class="line">      </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;摘抄于&lt;a href=&quot;https://www.geeksforgeeks.org/iterators-c-stl/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;geeksforgeeks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;迭代器用于指向&lt;strong&gt;STL容器&lt;
      
    
    </summary>
    
    
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>c++ I/O</title>
    <link href="http://yoursite.com/2020/01/11/c++%20I-O/"/>
    <id>http://yoursite.com/2020/01/11/c++%20I-O/</id>
    <published>2020-01-11T06:05:37.000Z</published>
    <updated>2020-01-11T07:28:00.727Z</updated>
    
    <content type="html"><![CDATA[<p>摘抄于 <a href="https://www.geeksforgeeks.org/basic-input-output-c/" target="_blank" rel="noopener">geeksforgeeks</a></p><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><h3 id="iostream"><a href="#iostream" class="headerlink" title="iostream"></a>iostream</h3><ul><li>用于标准的输入输出流</li><li>包含了cin,cout,cerr函数</li></ul><h3 id="iomanip"><a href="#iomanip" class="headerlink" title="iomanip"></a>iomanip</h3><ul><li>I/O manipulators</li><li>用于操作流的输出</li><li>包含了setw, setprecision函数</li></ul><h3 id="fstream"><a href="#fstream" class="headerlink" title="fstream"></a>fstream</h3><ul><li>用于文件流 file stream</li><li>用于处理从文件中作为input，读入数据</li><li>也可用于写入文件作为ouput</li></ul><h4 id="cerr"><a href="#cerr" class="headerlink" title="cerr"></a>cerr</h4><ul><li>不经过缓存的标准错误流</li><li>用于输出错误，同时也是一个ostream类的实例</li><li>当需要立即展示错误信息时可以使用这个函数</li></ul><h4 id="clog"><a href="#clog" class="headerlink" title="clog"></a>clog</h4><ul><li>经过缓存的错误流</li><li>也是一个iostream类的实例，用于输出错误</li><li>但与cerr不同的是，错误会首先插入到缓存中，并且存储在缓存中直到缓存被充满为止后放出。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;摘抄于 &lt;a href=&quot;https://www.geeksforgeeks.org/basic-input-output-c/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;geeksforgeeks&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;头文件&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>二叉树</title>
    <link href="http://yoursite.com/2020/01/07/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>http://yoursite.com/2020/01/07/%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2020-01-07T12:02:01.000Z</published>
    <updated>2020-01-07T12:02:27.753Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> val;</span><br><span class="line">TreeNode *left;</span><br><span class="line">TreeNode *right;</span><br><span class="line">TreeNode(<span class="keyword">int</span> x) : val(x), left(<span class="literal">NULL</span>), right(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tree</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(TreeNode* root)</span> </span>&#123;<span class="comment">//先访问根，然后访问子树</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; root-&gt;val&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (root-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">preorder(root-&gt;left);</span><br><span class="line"><span class="keyword">if</span> (root-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">preorder(root-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorder</span><span class="params">(TreeNode* root)</span></span>&#123;<span class="comment">//先访问左(右)子树，然后访问根，再访问另一个子树</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (root-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">inorder(root-&gt;left);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; root-&gt;val &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (root-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">inorder(root-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postorder</span><span class="params">(TreeNode* root)</span></span>&#123;<span class="comment">//先访问子树，然后访问根</span></span><br><span class="line"><span class="keyword">if</span> (root-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">postorder(root-&gt;left);</span><br><span class="line"><span class="keyword">if</span> (root-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">postorder(root-&gt;right);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; root-&gt;val &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(TreeNode* root)</span> </span>&#123;<span class="comment">//在二叉树中即为层次遍历，要借助队列实现</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(TreeNode* root)</span> </span>&#123;<span class="comment">//可以用递归或栈实现</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//5</span></span><br><span class="line"><span class="comment">//12</span></span><br><span class="line"><span class="comment">//3467</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TreeNode* root = <span class="keyword">new</span> TreeNode(<span class="number">5</span>);</span><br><span class="line">root-&gt;left = <span class="keyword">new</span> TreeNode(<span class="number">1</span>);</span><br><span class="line">root-&gt;right = <span class="keyword">new</span> TreeNode(<span class="number">2</span>);</span><br><span class="line">root-&gt;left-&gt;left = <span class="keyword">new</span> TreeNode(<span class="number">3</span>);</span><br><span class="line">root-&gt;left-&gt;right = <span class="keyword">new</span> TreeNode(<span class="number">4</span>);</span><br><span class="line">root-&gt;right-&gt;left = <span class="keyword">new</span> TreeNode(<span class="number">6</span>);</span><br><span class="line">root-&gt;right-&gt;right = <span class="keyword">new</span> TreeNode(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">Tree tree;</span><br><span class="line">tree.postorder(root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
    
    
      <category term="二叉树" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-环形链表与相交链表</title>
    <link href="http://yoursite.com/2020/01/06/Leetcode-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%E4%B8%8E%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2020/01/06/Leetcode-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%E4%B8%8E%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</id>
    <published>2020-01-06T08:53:12.000Z</published>
    <updated>2020-01-06T09:22:59.730Z</updated>
    
    <content type="html"><![CDATA[<p>两道题都用了双指针走的路径长度是否相等来解决，所以记录一下。</p><h1 id="环形链表"><a href="#环形链表" class="headerlink" title="环形链表"></a>环形链表</h1><p><a href="https://leetcode-cn.com/problems/linked-list-cycle/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/linked-list-cycle/</a></p><p>给定一个链表，判断链表中是否有环。</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png" alt="环形链表示意图"></p><h2 id="方法一-哈希表"><a href="#方法一-哈希表" class="headerlink" title="方法一(哈希表)"></a>方法一(哈希表)</h2><ol><li>遍历链表，将所有节点的地址记录到哈希表中</li><li>若存在环，则哈希表中会有对应的地址</li><li>若不存在环，会遍历到NULL位置</li></ol><h2 id="方法二-快慢指针"><a href="#方法二-快慢指针" class="headerlink" title="方法二(快慢指针)"></a>方法二(快慢指针)</h2><ol><li>利用两个指针，slow和fast</li><li>slow指针每次只走一步，fast指针每次走两步</li><li>若存在环，则fast指针必定能追上slow指针</li><li>若不存在环，fast指针会走到NULL位置</li></ol><h1 id="相交链表"><a href="#相交链表" class="headerlink" title="相交链表"></a>相交链表</h1><p><a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/intersection-of-two-linked-lists/</a></p><p>编写一个程序，找到两个单链表相交的起始节点。</p><p><img src="https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png" alt="相交链表示意图"></p><h2 id="方法一-暴力遍历"><a href="#方法一-暴力遍历" class="headerlink" title="方法一(暴力遍历)"></a>方法一(暴力遍历)</h2><ol><li>类似于双层for循环，只要找到相等的地址即可</li></ol><h2 id="方法二-哈希表"><a href="#方法二-哈希表" class="headerlink" title="方法二(哈希表)"></a>方法二(哈希表)</h2><ol><li>如环形链表一样，遍历两个链表，将地址全部放入哈希表中</li><li>若相交，则哈希表中可以找到相等地址</li></ol><h2 id="方法三-双指针"><a href="#方法三-双指针" class="headerlink" title="方法三(双指针)"></a>方法三(双指针)</h2><p>看图容易理解</p><p>  <a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/solution/tu-jie-xiang-jiao-lian-biao-by-user7208t/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/intersection-of-two-linked-lists/solution/tu-jie-xiang-jiao-lian-biao-by-user7208t/</a></p><ol><li>将两个链表看成三块</li><li>链表A中分为 AX，C</li><li>链表B中分为 BX，C</li><li>C是两个链表中相交的部分</li><li>让两个指针PA、PB遍历A、B，走到NULL时，重新定向到B、A，继续遍历</li><li>若相交<ol><li>则有指针PA的路径 s1 = AX+C+BX</li><li>PB的路径 s2 = BX+C+AX</li><li>所以s1 = s2，与环形链表类似</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;两道题都用了双指针走的路径长度是否相等来解决，所以记录一下。&lt;/p&gt;
&lt;h1 id=&quot;环形链表&quot;&gt;&lt;a href=&quot;#环形链表&quot; class=&quot;headerlink&quot; title=&quot;环形链表&quot;&gt;&lt;/a&gt;环形链表&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcod
      
    
    </summary>
    
    
    
      <category term="Leetcode简单题" scheme="http://yoursite.com/tags/Leetcode%E7%AE%80%E5%8D%95%E9%A2%98/"/>
    
      <category term="Leetcode链表题" scheme="http://yoursite.com/tags/Leetcode%E9%93%BE%E8%A1%A8%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-链表</title>
    <link href="http://yoursite.com/2019/12/24/Leetcode-%E9%93%BE%E8%A1%A8%E9%A2%98/"/>
    <id>http://yoursite.com/2019/12/24/Leetcode-%E9%93%BE%E8%A1%A8%E9%A2%98/</id>
    <published>2019-12-24T11:43:14.000Z</published>
    <updated>2020-01-06T09:17:12.027Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Leetcode链表的定义"><a href="#Leetcode链表的定义" class="headerlink" title="Leetcode链表的定义"></a>Leetcode链表的定义</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode *next;</span><br><span class="line"></span><br><span class="line">    ListNode(<span class="keyword">int</span> x) : val(x), next(<span class="literal">NULL</span>) &#123;&#125; <span class="comment">//构造函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><ol><li><p>先获取指向整条链表的头指针</p><p> ListNode *head = new ListNode(-1);</p></li><li><p>定义一个遍历该链表的指针</p><p> ListNode *p = head;</p></li><li><p>用p来构造该链表，假设输入为 3-&gt;4-2</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">p-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"></span><br><span class="line">p-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"></span><br><span class="line">p-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">p = p-&gt;next;</span><br></pre></td></tr></table></figure><ol start="4"><li>调用函数修改指针时，用head指针作为实参代入</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Leetcode链表的定义&quot;&gt;&lt;a href=&quot;#Leetcode链表的定义&quot; class=&quot;headerlink&quot; title=&quot;Leetcode链表的定义&quot;&gt;&lt;/a&gt;Leetcode链表的定义&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;
      
    
    </summary>
    
    
    
      <category term="Leetcode链表题" scheme="http://yoursite.com/tags/Leetcode%E9%93%BE%E8%A1%A8%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-整数反转</title>
    <link href="http://yoursite.com/2019/12/23/Leetcode-7/"/>
    <id>http://yoursite.com/2019/12/23/Leetcode-7/</id>
    <published>2019-12-23T14:33:31.000Z</published>
    <updated>2020-01-06T09:05:39.958Z</updated>
    
    <content type="html"><![CDATA[<h1 id="整数反转"><a href="#整数反转" class="headerlink" title="整数反转"></a>整数反转</h1><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p><p>如果反转后整数溢出那么就返回 0。</p><ul><li><p>示例 1:</p><ul><li>输入: 123</li><li>输出: 321</li></ul></li><li><p>示例 2:</p><ul><li>输入: -123</li><li>输出: -321</li></ul></li><li><p>示例 3:</p><ul><li>输入: 120</li><li>输出: 21</li></ul></li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>将x模10得到尾数，result自乘10并加上这个尾数</p><p>重点在于处理溢出</p><p>溢出的原因在于result自乘10，可能产生正溢出，可能产生负溢出</p><p>那么反过来想result自乘10会正溢出，就说明正数最大值除以10是小于result的</p><p>负溢出同理</p><ul><li><p>比如正数最大为15</p><ul><li><p>result为5</p><ul><li>那么15/10 = 1 &lt; result，产生正溢出</li></ul></li></ul></li><li><p>正溢出</p><ul><li>在下一次构造result前，检查INT32_MAX/10是否比result要小</li></ul></li><li><p>负溢出</p><ul><li>在下一次构造result前，检查INT32_MIN/10是否比result要小</li></ul></li></ul><h2 id="解"><a href="#解" class="headerlink" title="解"></a>解</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">10</span>; x !=<span class="number">0</span>;)</span><br><span class="line">    &#123;</span><br><span class="line">      result = result * <span class="number">10</span> + x % i;</span><br><span class="line">      x = x / <span class="number">10</span>;</span><br><span class="line">      <span class="keyword">if</span> (x != <span class="number">0</span> &amp;&amp; result &gt; INT32_MAX / <span class="number">10</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (x != <span class="number">0</span> &amp;&amp; result &lt; INT32_MIN / <span class="number">10</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;整数反转&quot;&gt;&lt;a href=&quot;#整数反转&quot; class=&quot;headerlink&quot; title=&quot;整数反转&quot;&gt;&lt;/a&gt;整数反转&lt;/h1&gt;&lt;p&gt;给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。&lt;/p&gt;
&lt;p&gt;如果反转后整数溢出那么就返回 0。&lt;
      
    
    </summary>
    
    
    
      <category term="Leetcode简单题" scheme="http://yoursite.com/tags/Leetcode%E7%AE%80%E5%8D%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>unity学习-1</title>
    <link href="http://yoursite.com/2019/12/13/unity%E5%AD%A6%E4%B9%A0-1/"/>
    <id>http://yoursite.com/2019/12/13/unity%E5%AD%A6%E4%B9%A0-1/</id>
    <published>2019-12-13T12:32:39.000Z</published>
    <updated>2019-12-13T13:37:48.283Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://www.youtube.com/watch?v=XDAYS-qYe6Y" target="_blank" rel="noopener">从YouTube视频上抄的代码</a></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CubeMover</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//类似于JAVA中的注释，可以让被注释的属性在面板上设置</span></span><br><span class="line">    [<span class="meta">SerializeField</span>]  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> speed = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">float</span> horizontal = Input.GetAxis(<span class="string">"Horizontal"</span>);<span class="comment">//获取x轴输入</span></span><br><span class="line">        <span class="keyword">float</span> vertical = Input.GetAxis(<span class="string">"Vertical"</span>);<span class="comment">//获取y轴输入</span></span><br><span class="line"></span><br><span class="line">        Vector3 movement = <span class="keyword">new</span> Vector3(horizontal,vertical);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//transform是继承于MonoBehaviour的成员变量</span></span><br><span class="line">        <span class="comment">//为了控制速度需要用到Time.deltaTime</span></span><br><span class="line">        transform.position += movement * Time.deltaTime * speed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnCollisionEnter</span>(<span class="params">Collision collision</span>)</span>&#123; <span class="comment">//碰撞发生时</span></span><br><span class="line">        SceneManager.LoadScene(<span class="number">0</span>);  <span class="comment">//重新加载场景，需要引入SceneManager包</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Bomb</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//OnEnable需要与Start、Awake对比</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Respawn();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (transform.position.y &lt; <span class="number">-10</span>)</span><br><span class="line">            Respawn();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Respawn</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">float</span> randomX = UnityEngine.Random.Range(<span class="number">-10</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">float</span> randomY = UnityEngine.Random.Range(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        transform.position = <span class="keyword">new</span> Vector3(randomX, randomY);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> rigidbody = GetComponent&lt;Rigidbody&gt;(); <span class="comment">//获取该物体所设置的组件 获取组件中的刚体</span></span><br><span class="line">        rigidbody.velocity = Vector3.zero;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>碰撞后可能会产生奇怪的光</p><p>需要设置-&gt;Window-&gt;lighting-&gt;Debug Setting-&gt;Auto Generate</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=XDAYS-qYe6Y&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;从YouTube视频上抄的代码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;
      
    
    </summary>
    
    
    
      <category term="unity" scheme="http://yoursite.com/tags/unity/"/>
    
  </entry>
  
</feed>
