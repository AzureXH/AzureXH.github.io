<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Azure XH</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-01T16:53:25.909Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>AzureXH</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>c++ inline与#define</title>
    <link href="http://yoursite.com/2020/04/01/c++%20inline/"/>
    <id>http://yoursite.com/2020/04/01/c++%20inline/</id>
    <published>2020-04-01T15:03:44.000Z</published>
    <updated>2020-04-01T16:53:25.909Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.runoob.com/w3cnote/cpp-inline-usage.html" target="_blank" rel="noopener">https://www.runoob.com/w3cnote/cpp-inline-usage.html</a></p><p>inline关键字，主要用于定义一些小函数，而这些小函数一般是被大量使用的，如果直接频繁调用小函数，会大量消耗栈的空间。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//函数定义为inline即:内联函数</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span>* <span class="title">dbtest</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (i % <span class="number">2</span> &gt; <span class="number">0</span>) ? <span class="string">"奇"</span> : <span class="string">"偶"</span>;</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span> (i=<span class="number">1</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"i:%d    奇偶性:%s /n"</span>, i, dbtest(i));    </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的用法会将dbtest(i)直接换成(i % 2 &gt; 0) ? “奇” : “偶”，于是无需重复调用函数。</p><p>inline关键字其实是<strong>给编译器的一个优化选项</strong>，而这个优化选项到底要不要使用，是由编译器来确认的。</p><p>当inline函数复杂时，这个优化选项会被否决。所以inline函数要尽量写的小并且简单。</p><p>在类中实现了的成员函数都是默认内联的，但一般成员函数只在类中声明，在类文件外具体实现。</p><p>inline只有修饰实现的函数才有效果，修饰的只是函数声明的话是没有效果的。</p><h2 id="与-define的区别"><a href="#与-define的区别" class="headerlink" title="与#define的区别"></a>与#define的区别</h2><p>其实inline的用法跟#define是一样的，就是把定义的内容复制到原位再展开，那为什么不用#define呢？</p><p>原因在于#define容易产生二义性，一定要对参数用括号括起来</p><p><a href="https://blog.csdn.net/u011209859/article/details/50205361" target="_blank" rel="noopener">https://blog.csdn.net/u011209859/article/details/50205361</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MUL(x) x*x</span></span><br><span class="line"></span><br><span class="line">MUL(<span class="number">10</span>+<span class="number">10</span>);     <span class="comment">//产生的是10+10*10+10   结果为120，但我们想要的结果应该是400</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MUL(x) (x)*(x)      <span class="comment">//添加括号</span></span></span><br><span class="line"></span><br><span class="line">MUL(<span class="number">10</span>+<span class="number">10</span>);     <span class="comment">//产生结果400，正确了</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;mul(<span class="number">10</span>+<span class="number">10</span>);   <span class="comment">//也是400，不会考虑二义性</span></span><br></pre></td></tr></table></figure><p>还有一种情况是传入参数是a++，但是这个结果跟具体编译器的有关，就不说了。</p><p>所以，#define是预处理指令，可能会产生一些问题，而inline关键字是编译时对函数的优化，只用像正常调用函数一样就可以了。</p><p>并且#define没有类型检查，所以是类型不安全的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.runoob.com/w3cnote/cpp-inline-usage.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.runoob.com/w3cnote/cpp-inline-u
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>位运算</title>
    <link href="http://yoursite.com/2020/03/31/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    <id>http://yoursite.com/2020/03/31/%E4%BD%8D%E8%BF%90%E7%AE%97/</id>
    <published>2020-03-31T04:38:25.000Z</published>
    <updated>2020-03-31T04:51:42.414Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/labuladong/fucking-algorithm/blob/master/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%B8%B8%E7%94%A8%E7%9A%84%E4%BD%8D%E6%93%8D%E4%BD%9C.md" target="_blank" rel="noopener">https://github.com/labuladong/fucking-algorithm/blob/master/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%B8%B8%E7%94%A8%E7%9A%84%E4%BD%8D%E6%93%8D%E4%BD%9C.md</a></p><h2 id="常用的操作"><a href="#常用的操作" class="headerlink" title="常用的操作"></a>常用的操作</h2><p>n&amp;(n-1)：用于消除二进制中最后的一个1。</p><p>比如，5&amp;(5-1)，0101 &amp; 0100，会产生0100，消除末尾的1。</p><p>跟右移一位不同，0101&gt;&gt;1 = 0010。</p><p>常用于：计算一个数的二进制中含有多少个1，判断一个数是不是2的指数。</p><h3 id="二进制含有多少个1（汉明权重）"><a href="#二进制含有多少个1（汉明权重）" class="headerlink" title="二进制含有多少个1（汉明权重）"></a>二进制含有多少个1（汉明权重）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(num!=<span class="number">0</span>)   <span class="comment">//只有当num只含有一个1时，才会导致下次循环num等于0</span></span><br><span class="line">    &#123;</span><br><span class="line">        num = num&amp;(n<span class="number">-1</span>);</span><br><span class="line">        res++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2的指数"><a href="#2的指数" class="headerlink" title="2的指数"></a>2的指数</h3><p>一个数如果是2的指数，那么它的二进制中只含有一个1。</p><p>则num&amp;(num-1)的结果为0</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(num&lt;<span class="number">0</span>)   <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  (num&amp;(num<span class="number">-1</span>))==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/labuladong/fucking-algorithm/blob/master/%E7%AE%97%E6%B3%95%E6%80%9D%E7%BB%B4%E7%B3%BB%E5%88%97/%E5%B8%B8%E7%
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>动态规划</title>
    <link href="http://yoursite.com/2020/03/30/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>http://yoursite.com/2020/03/30/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</id>
    <published>2020-03-30T11:46:53.000Z</published>
    <updated>2020-04-01T17:42:39.816Z</updated>
    
    <content type="html"><![CDATA[<p>暂定</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;暂定&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>进程与线程</title>
    <link href="http://yoursite.com/2020/03/30/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/"/>
    <id>http://yoursite.com/2020/03/30/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</id>
    <published>2020-03-30T11:45:24.000Z</published>
    <updated>2020-03-30T11:53:54.647Z</updated>
    
    <content type="html"><![CDATA[<p>参考</p><p><a href="https://github.com/labuladong/fucking-algorithm/blob/master/%E6%8A%80%E6%9C%AF/linux%E8%BF%9B%E7%A8%8B.md" target="_blank" rel="noopener">https://github.com/labuladong/fucking-algorithm/blob/master/%E6%8A%80%E6%9C%AF/linux%E8%BF%9B%E7%A8%8B.md</a></p><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>正在执行的程序。</p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>进程状态、进程号、虚拟内存空间、父进程指针、子进程列表、存放文件系统信息的指针、该进程打开的文件指针</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> &#123;</span></span><br><span class="line"><span class="comment">// 进程状态</span></span><br><span class="line"><span class="keyword">long</span>  state;</span><br><span class="line"><span class="comment">// 虚拟内存结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mm_struct</span>  *<span class="title">mm</span>;</span></span><br><span class="line"><span class="comment">// 进程号</span></span><br><span class="line"><span class="keyword">pid_t</span>  pid;</span><br><span class="line"><span class="comment">// 指向父进程的指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> __<span class="title">rcu</span>  *<span class="title">parent</span>;</span></span><br><span class="line"><span class="comment">// 子进程列表</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span><span class="title">children</span>;</span></span><br><span class="line"><span class="comment">// 存放文件系统信息的指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fs_struct</span>*<span class="title">fs</span>;</span></span><br><span class="line"><span class="comment">// 一个数组，包含该进程打开的文件指针</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">files_struct</span>*<span class="title">files</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/labuladong/fucking-algorithm/blob/master/%E6%8A%80%E6%9C%AF/linux%E8%BF%9B%E7%A8%8B.md&quot; target=&quot;_bl
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>寻找数组中重复的数字</title>
    <link href="http://yoursite.com/2020/03/23/%E5%AF%BB%E6%89%BE%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>http://yoursite.com/2020/03/23/%E5%AF%BB%E6%89%BE%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/</id>
    <published>2020-03-23T06:43:41.000Z</published>
    <updated>2020-03-23T07:50:10.151Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><p><a href="https://blog.nowcoder.net/n/808e31c3b2424647a3743aad6e2831e7?f=comment" target="_blank" rel="noopener">https://blog.nowcoder.net/n/808e31c3b2424647a3743aad6e2831e7?f=comment</a></p><p>主要思想是归位，把<strong>数组中每个数字放回到与下标对应的位置上</strong>。</p><p>遍历数组中的每一个数，作如下操作</p><ul><li>nums[i] = i，说明当前数字位置正确了。继续遍历下一个</li><li>nums[i] != i，说明当前数字位置不正确<ul><li><strong>比较nums[i]与nums[nums[i]]</strong>，这样比较的目的就是为了确定<strong>是否重复</strong>。</li><li>比如i = 0，nums[i] = 2，（注意前提已经确定nums[i] != i），那么nums[nums[i]]就是nums[2]</li><li>nums[i]!=nums[nums[i]]时，即2！=nums[2]，说明数组位置为2的数是不正确的，于是进行交换操作。</li><li>nums[i] == nums[nums[i]]时，即2==nums[2]，说明数组重复了。</li></ul></li></ul><p>需要特别分清楚，下标i，数组下标i的数字，以及nums[nums[i]]这三者的关系（套娃。。）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">duplicate</span><span class="params">(<span class="keyword">int</span> numbers[], <span class="keyword">int</span> length, <span class="keyword">int</span>* duplication)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;numbers.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]!=i)  <span class="comment">//当前数字没有归位</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span>(nums[i]!=i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//没有重复，进行交换</span></span><br><span class="line">                <span class="keyword">if</span>(nums[i]!=nums[nums[i]])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//注意这里的交换有点阴险</span></span><br><span class="line">                    <span class="keyword">int</span> temp = nums[i];</span><br><span class="line">                    nums[i] = nums[temp];</span><br><span class="line">                    nums[temp] = temp;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>    <span class="comment">//重复了</span></span><br><span class="line">                &#123;</span><br><span class="line">                    duplication[<span class="number">0</span>] = nums[i];</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.nowcoder.net/n/808e31c3b2424647a3743aad6e2831e7?f=comment&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.n
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>概率相关</title>
    <link href="http://yoursite.com/2020/03/23/%E6%A6%82%E7%8E%87%E7%9B%B8%E5%85%B3/"/>
    <id>http://yoursite.com/2020/03/23/%E6%A6%82%E7%8E%87%E7%9B%B8%E5%85%B3/</id>
    <published>2020-03-23T04:47:33.000Z</published>
    <updated>2020-03-23T04:54:19.637Z</updated>
    
    <content type="html"><![CDATA[<ul><li>头文件&lt;cstdlib&gt;</li><li>函数rand()和srand(unsined int seed)</li><li>用时间做种子需要头文件&lt;ctime&gt;</li><li>rand()默认种子为1，RAND_MAX的值为32767</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">srand(<span class="keyword">int</span>(time(<span class="literal">NULL</span>)));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; rand() /<span class="keyword">double</span>(RAND_MAX)&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h2 id="常用公式"><a href="#常用公式" class="headerlink" title="常用公式"></a>常用公式</h2><p><a href="https://blog.csdn.net/baidu_41560343/article/details/88830374" target="_blank" rel="noopener">https://blog.csdn.net/baidu_41560343/article/details/88830374</a></p><ul><li>产生一定范围随机数的通用表示公式是：</li><li>取得[0,x)的随机<strong>整数</strong>：rand()%x；</li><li>取得[a,b)的随机<strong>整数</strong>：rand()%(b-a)+a；</li><li>取得[a,b]的随机<strong>整数</strong>：rand()%(b-a+1)+a；</li><li>取得(a,b]的随机<strong>整数</strong>：rand()%(b-a)+a+1；</li><li>取得0-1之间的<strong>浮点数</strong>：rand()/double(RAND_MAX)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;头文件&amp;lt;cstdlib&amp;gt;&lt;/li&gt;
&lt;li&gt;函数rand()和srand(unsined int seed)&lt;/li&gt;
&lt;li&gt;用时间做种子需要头文件&amp;lt;ctime&amp;gt;&lt;/li&gt;
&lt;li&gt;rand()默认种子为1，RAND_MAX的值为327
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>c++ resize和reserve</title>
    <link href="http://yoursite.com/2020/03/22/c++%20resize%E5%92%8Creserve/"/>
    <id>http://yoursite.com/2020/03/22/c++%20resize%E5%92%8Creserve/</id>
    <published>2020-03-22T14:27:04.000Z</published>
    <updated>2020-03-23T06:26:02.030Z</updated>
    
    <content type="html"><![CDATA[<h2 id="resize"><a href="#resize" class="headerlink" title="resize"></a>resize</h2><p>resize直接改变当前容器内含有元素的数量，但是不会改变原有位置的数字</p><p>resize(len)，如果len大于原先的size，会从size之后开始填充。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(<span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line">a.resize(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a[i];   <span class="comment">//输出22200</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(<span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line">a.resize(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span>; i++)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a[i];   <span class="comment">//输出2 不会改变原有的数字，但是size会被改变，无法访问a[1]和a[2]</span></span><br></pre></td></tr></table></figure><h2 id="reserve"><a href="#reserve" class="headerlink" title="reserve"></a>reserve</h2><p>改变容器的最大容量，如果改变后的容量比改变前的要大，首先是会先分配一块新的内存，然后将原先的数据通过copy construct复制过去，再将之前的内存销毁。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;resize&quot;&gt;&lt;a href=&quot;#resize&quot; class=&quot;headerlink&quot; title=&quot;resize&quot;&gt;&lt;/a&gt;resize&lt;/h2&gt;&lt;p&gt;resize直接改变当前容器内含有元素的数量，但是不会改变原有位置的数字&lt;/p&gt;
&lt;p&gt;resize(len
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>最长回文子串</title>
    <link href="http://yoursite.com/2020/03/22/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/"/>
    <id>http://yoursite.com/2020/03/22/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</id>
    <published>2020-03-22T06:54:43.000Z</published>
    <updated>2020-03-23T04:48:10.400Z</updated>
    
    <content type="html"><![CDATA[<h2 id="最长回文子串"><a href="#最长回文子串" class="headerlink" title="最长回文子串"></a>最长回文子串</h2><p><a href="https://leetcode-cn.com/problems/longest-palindromic-substring/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-palindromic-substring/</a></p><p>遍历字符串，对字符串上的每个字符从中心向左右展开。</p><p>注意到展开有两种方式，奇数和偶数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">longestPalindrome</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">string</span> res = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;s.length();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> len1 = expand(s,i,i);   <span class="comment">//奇数</span></span><br><span class="line">        <span class="keyword">int</span> len2 = expand(s,i,i+<span class="number">1</span>); <span class="comment">//偶数</span></span><br><span class="line">        <span class="keyword">int</span> len = len1&gt;len2?len1:len2;<span class="comment">//取展开长度最长的回文子串</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(len&gt;=ans)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = len;</span><br><span class="line">            <span class="comment">//注意start和end的计算</span></span><br><span class="line">            <span class="keyword">int</span> start = i - (len<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">int</span> end = len/<span class="number">2</span> + i;    </span><br><span class="line">            res = s.substr(start,end-start+<span class="number">1</span>);<span class="comment">//注意substr的用法，substr(pos,count) 截取[pos,pos+count)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//向左向右展开</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">expand</span><span class="params">(<span class="built_in">string</span>&amp; s,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(L&gt;=<span class="number">0</span>&amp;&amp;R&lt;s.length()&amp;&amp;s[L]==s[R])   L--,R++;</span><br><span class="line">    <span class="keyword">return</span> R-L<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最长公共前缀"><a href="#最长公共前缀" class="headerlink" title="最长公共前缀"></a>最长公共前缀</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;最长回文子串&quot;&gt;&lt;a href=&quot;#最长回文子串&quot; class=&quot;headerlink&quot; title=&quot;最长回文子串&quot;&gt;&lt;/a&gt;最长回文子串&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/longest-pali
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>c++迭代器的删除操作</title>
    <link href="http://yoursite.com/2020/03/21/c++%20%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2020/03/21/c++%20%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C/</id>
    <published>2020-03-21T15:19:48.000Z</published>
    <updated>2020-03-23T06:26:02.171Z</updated>
    
    <content type="html"><![CDATA[<h3 id="erase-iterator"><a href="#erase-iterator" class="headerlink" title="erase(iterator)"></a>erase(iterator)</h3><p>注意erase会使传入的迭代器失效，但是erase一般会返回一个有效的迭代器</p><ul><li>对于序列容器vector,deque来说，使用erase(iterator)后，后边的每个元素的迭代器都会失效，但是<strong>后边每个元素都会往前移动一个位置</strong>，<strong>但是erase会返回下一个有效的迭代器</strong>；</li></ul><p>错误代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span> &#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it1 = nums.begin();</span><br><span class="line">nums.erase(it1); </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it1;   <span class="comment">//空指针异常</span></span><br></pre></td></tr></table></figure><p>将代码修改为nums.erase(it1)会返回下一个迭代器</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nums = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span> &#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it1 = nums.begin();</span><br><span class="line">it1 = nums.erase(it1); </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it1;   <span class="comment">//输出2</span></span><br></pre></td></tr></table></figure><ul><li>对于关联容器map、set来说，使用了erase(iterator)后，当前元素的迭代器失效，但是其结构是红黑树，删除当前元素的，<strong>不会影响到下一个元素的迭代器</strong>，所以在调用erase之前，记录下一个元素的迭代器即可。</li><li>对于list来说，它使用了不连续分配的内存，并且它的erase方法也会返回下一个有效的iterator，因此上面两种正确的方法都可以使用。<h2 id="string的删除操作"><a href="#string的删除操作" class="headerlink" title="string的删除操作"></a>string的删除操作</h2></li></ul><p><a href="https://blog.csdn.net/u010472607/article/details/80431604" target="_blank" rel="noopener">https://blog.csdn.net/u010472607/article/details/80431604</a></p><p>非迭代器操作</p><ol><li>basic_string &amp; erase(size_type pos=0, size_type n=npos);<br>即从给定起始位置pos处开始删除, 要删除字符的长度为n, 返回值修改后的string对象引用</li></ol><p>迭代器操作</p><ol start="2"><li><p>iterator erase(const_iterator position)<br>删除迭代器位置处的单个字符, 并返回下个元素的迭代器</p></li><li><p>iterator erase(const_iterator first, const_iterator last)<br>删除迭代器[first, last)区间的所有字符,返回一个指向被删除的最后一个元素的下一个字符的迭代器.</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;erase-iterator&quot;&gt;&lt;a href=&quot;#erase-iterator&quot; class=&quot;headerlink&quot; title=&quot;erase(iterator)&quot;&gt;&lt;/a&gt;erase(iterator)&lt;/h3&gt;&lt;p&gt;注意erase会使传入的迭代器失效，但是
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>c++ string</title>
    <link href="http://yoursite.com/2020/03/21/c++%20string/"/>
    <id>http://yoursite.com/2020/03/21/c++%20string/</id>
    <published>2020-03-21T15:10:51.000Z</published>
    <updated>2020-03-21T15:11:51.512Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_37941471/article/details/82107077" target="_blank" rel="noopener">https://blog.csdn.net/qq_37941471/article/details/82107077</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_37941471/article/details/82107077&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/qq_37941471/art
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>http与https</title>
    <link href="http://yoursite.com/2020/03/19/http%E4%B8%8Ehttps/"/>
    <id>http://yoursite.com/2020/03/19/http%E4%B8%8Ehttps/</id>
    <published>2020-03-19T08:00:41.000Z</published>
    <updated>2020-03-23T06:26:02.171Z</updated>
    
    <content type="html"><![CDATA[<p>HTTP协议和HTTPS协议区别如下：</p><ol><li><p>HTTP协议是以明文的方式在网络中传输数据，而HTTPS协议传输的数据则是经过TLS加密后的，HTTPS具有更高的安全性</p></li><li><p>HTTPS在TCP三次握手阶段之后，还需要进行SSL 的handshake，协商加密使用的对称加密密钥</p></li><li><p>HTTPS协议需要服务端申请证书，浏览器端安装对应的根证书</p></li><li><p>HTTP协议端口是80，HTTPS协议端口是443</p></li></ol><h2 id="HTTPS优点："><a href="#HTTPS优点：" class="headerlink" title="HTTPS优点："></a>HTTPS优点：</h2><ul><li><p>HTTPS传输数据过程中使用密钥进行加密，所以安全性更高</p></li><li><p>HTTPS协议可以认证用户和服务器，确保数据发送到正确的用户和服务器</p></li></ul><h2 id="HTTPS缺点："><a href="#HTTPS缺点：" class="headerlink" title="HTTPS缺点："></a>HTTPS缺点：</h2><ul><li><p>HTTPS握手阶段延时较高：由于在进行HTTP会话之前还需要进行SSL握手，因此HTTPS协议握手阶段延时增加</p></li><li><p>HTTPS部署成本高：一方面HTTPS协议需要使用证书来验证自身的安全性，所以需要购买CA证书；另一方面由于采用HTTPS协议需要进行加解密的计算，占用CPU资源较多，需要的服务器配置或数目高</p></li></ul><h2 id="HTTP返回码"><a href="#HTTP返回码" class="headerlink" title="HTTP返回码"></a>HTTP返回码</h2><ul><li><p>1xx：指示信息–表示请求已接收，继续处理。</p></li><li><p>2xx：成功–表示请求已被成功接收、理解、接受。</p></li><li><p>3xx：重定向–要完成请求必须进行更进一步的操作。</p></li><li><p>4xx：客户端错误–请求有语法错误或请求无法实现。</p></li><li><p>5xx：服务器端错误–服务器未能实现合法的请求。</p></li><li><p>常见状态代码、状态描述的详细说明如下。</p></li><li><p>200 OK：客户端请求成功。</p></li><li><p>206 partial content服务器已经正确处理部分GET请求，实现断点续传或同时分片下载，该请求必须包含Range请求头来指示客户端期望得到的范围</p></li><li><p>300 multiple choices（可选重定向）:被请求的资源有一系列可供选择的反馈信息，由浏览器/用户自行选择其中一个。</p></li><li><p>301  moved permanently（永久重定向）：该资源已被永久移动到新位置，将来任何对该资源的访问都要使用本响应返回的若干个URI之一。</p></li><li><p>302 move temporarily(临时重定向)：请求的资源现在临时从不同的URI中获得，</p></li><li><p>304：not modified :如果客户端发送一个待条件的GET请求并且该请求以经被允许，而文档内容未被改变，则返回304,该响应不包含包体（即可直接使用缓存）。</p></li><li><p>403 Forbidden：服务器收到请求，但是拒绝提供服务。</p></li><li><p>404 Not Found：请求资源不存在，举个例子：输入了错误的URL。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;HTTP协议和HTTPS协议区别如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;HTTP协议是以明文的方式在网络中传输数据，而HTTPS协议传输的数据则是经过TLS加密后的，HTTPS具有更高的安全性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HTTPS在TCP三次握手阶段之后，还需要进行
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据库</title>
    <link href="http://yoursite.com/2020/03/19/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://yoursite.com/2020/03/19/%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2020-03-19T07:41:24.000Z</published>
    <updated>2020-03-19T08:33:09.922Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库事务"><a href="#数据库事务" class="headerlink" title="数据库事务"></a>数据库事务</h2><p>数据库事务(Database Transaction) ，<strong>是指作为单个逻辑工作单元执行的一系列操作</strong>，<strong>要么完全地执行，要么完全地不执行</strong>。事务处理可以确保除非事务性单元内的所有操作都成功完成，否则不会永久更新面向数据的资源。通过将一组相关操作组合为一个要么全部成功要么全部失败的单元，可以简化错误恢复并使应用程序更加可靠。一个逻辑工作单元要成为事务，必须满足所谓的ACID（原子性、一致性、隔离性和持久性）属性。事务是数据库运行中的逻辑工作单位，由DBMS中的事务管理子系统负责事务的处理。</p><h2 id="事物的一致性"><a href="#事物的一致性" class="headerlink" title="事物的一致性"></a>事物的一致性</h2><p>事务（Transaction）是由一系列对系统中数据进行访问与更新的操作所组成的一个程序执行逻辑单元。事务是DBMS中最基础的单位，事务不可分割。<br>事务具有4个基本特征，分别是：原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Duration），简称ACID。</p><h3 id="原子性（Atomicity）"><a href="#原子性（Atomicity）" class="headerlink" title="原子性（Atomicity）"></a>原子性（Atomicity）</h3><p>原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，[删删删]因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。</p><h3 id="一致性（Consistency）"><a href="#一致性（Consistency）" class="headerlink" title="一致性（Consistency）"></a>一致性（Consistency）</h3><p>一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。</p><p>拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。</p><h3 id="隔离性（Isolation）"><a href="#隔离性（Isolation）" class="headerlink" title="隔离性（Isolation）"></a>隔离性（Isolation）</h3><p>隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。</p><p>即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。</p><p>多个事务并发访问时，事务之间是隔离的，一个事务不应该影响其它事务运行效果。这指的是在并发环境中，当不同的事务同时操纵相同的数据时，每个事务都有各自的完整数据空间。由并发事务所做的修改必须与任何其他并发事务所做的修改隔离。</p><ul><li><p>不同的隔离级别：</p><ul><li>Read Uncommitted（读取未提交[添加中文释义]内容）：最低的隔离级别，什么都不需要做，一个事务可以读到另一个事务未提交的结果。所有的并发事务问题都会发生。</li><li>Read Committed（读取提交内容）：只有在事务提交后，其更新结果才会被其他事务看见。可以解决脏读问题。</li><li>Repeated Read（可重复读）：在一个事务中，对于同一份数据的读取结果总是相同的，无论是否有其他事务对这份数据进行操作，以及这个事务是否提交。可以解决脏读、不可重复读。</li><li>Serialization（可串行化）：事务串行化执行，隔离级别最高，牺牲了系统的并发性。可以解决并发事务的所有问题。</li></ul></li></ul><h3 id="持久性（Durability）"><a href="#持久性（Durability）" class="headerlink" title="持久性（Durability）"></a>持久性（Durability）</h3><p>持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</p><p>例如我们在使用JDBC操作数据库时，在提交事务方法后，提示用户事务操作完成，当我们程序执行完成直到看到提示后，就可以认定事务以及正确提交，即使这时候数据库出现了问题，也必须要将我们的事务完全执行完成，否则就会造成我们看到提示事务处理完毕，但是数据库因为故障而没有执行事务的重大错误。</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>数据库索引是为了增加查询速度而对表字段附加的一种标识，是对数据库表中一列或多列的值进行排序的一种结构。</p><p>DB在执行一条Sql语句的时候，默认的方式是根据搜索条件进行全表扫描，遇到匹配条件的就加入搜索结果集合。如果我们对某一字段增加索引，查询时就会先去索引列表中一次定位到特定值的行数，大大减少遍历匹配的行数，所以能明显增加查询的速度。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。</p><p>可以大大加快数据的检索速度，这也是创建索引的最主要的原因。</p><p>可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。</p><p>在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。</p><p>通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li><p>创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。</p></li><li><p>索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立聚簇索引，那么需要的空间就会更大。</p></li><li><p>当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度。</p></li></ul><h3 id="添加索引原则"><a href="#添加索引原则" class="headerlink" title="添加索引原则"></a>添加索引原则</h3><ul><li><p><strong>在查询中很少使用或者参考的列不应该创建索引</strong>。这是因为，既然这些列很少使用到，因此有索引或者无索引，并不能提高查询速度。相反，由于增加了索引，反而降低了系统的维护速度和增大了空间需求。</p></li><li><p><strong>只有很少数据值的列也不应该增加索引</strong>。这是因为，由于这些列的取值很少，例如人事表的性别列，在查询的结果中，结果集的数据行占了表中数据行的很大比例，即需要在表中搜索的数据行的比例很大。增加索引，并不能明显加快检索速度。</p></li><li><p><strong>定义为text、image和bit数据类型的列不应该增加索引</strong>。这是因为，这些列的数据量要么相当大，要么取值很少。(数据量太大也不适合增加索引)</p></li><li><p><strong>当修改性能远远大于检索性能时，不应该创建索引</strong>。这是因为，修改性能和检索性能是互相矛盾的。当增加索引时，会提高检索性能，但是会降低修改性能。当减少索引时，会提高修改性能，降低检索性能。因此，当修改性能远远大于检索性能时，不应该创建索引。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据库事务&quot;&gt;&lt;a href=&quot;#数据库事务&quot; class=&quot;headerlink&quot; title=&quot;数据库事务&quot;&gt;&lt;/a&gt;数据库事务&lt;/h2&gt;&lt;p&gt;数据库事务(Database Transaction) ，&lt;strong&gt;是指作为单个逻辑工作单元执行的一系列操作&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>堆</title>
    <link href="http://yoursite.com/2020/03/19/%E5%A0%86/"/>
    <id>http://yoursite.com/2020/03/19/%E5%A0%86/</id>
    <published>2020-03-19T07:21:02.000Z</published>
    <updated>2020-03-19T07:37:14.783Z</updated>
    
    <content type="html"><![CDATA[<h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>堆是一个树形结构，是一个完全二叉树的结构，分为最大堆，最小堆。</p><h3 id="大顶堆"><a href="#大顶堆" class="headerlink" title="大顶堆"></a>大顶堆</h3><p>根节点的值是所有节点的值中最大的，并且对每个节点都递归适用该规则</p><h3 id="小顶堆"><a href="#小顶堆" class="headerlink" title="小顶堆"></a>小顶堆</h3><p>根节点的值是所有节点的值中最小的，并且对每个节点都递归适用该规则</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;性质&quot;&gt;&lt;a href=&quot;#性质&quot; class=&quot;headerlink&quot; title=&quot;性质&quot;&gt;&lt;/a&gt;性质&lt;/h2&gt;&lt;p&gt;堆是一个树形结构，是一个完全二叉树的结构，分为最大堆，最小堆。&lt;/p&gt;
&lt;h3 id=&quot;大顶堆&quot;&gt;&lt;a href=&quot;#大顶堆&quot; class=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Spring-IoC和DI</title>
    <link href="http://yoursite.com/2020/03/19/Spring-IoC%E5%92%8CDI/"/>
    <id>http://yoursite.com/2020/03/19/Spring-IoC%E5%92%8CDI/</id>
    <published>2020-03-19T07:11:30.000Z</published>
    <updated>2020-03-19T07:37:12.841Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.iteye.com/blog/jinnianshilongnian-1413846" target="_blank" rel="noopener">https://www.iteye.com/blog/jinnianshilongnian-1413846</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.iteye.com/blog/jinnianshilongnian-1413846&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.iteye.com/blog/jinnianshilongn
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>TCP四次挥手</title>
    <link href="http://yoursite.com/2020/03/19/TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
    <id>http://yoursite.com/2020/03/19/TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</id>
    <published>2020-03-19T04:33:17.000Z</published>
    <updated>2020-03-23T06:26:02.030Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdn.net/20170305155824486?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTEZfMjAxNg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""></p><ul><li>客户端A发送一个FIN，用来关闭客户A到服务器B的数据传送。</li><li>服务器B收到这个FIN，它发回一个ACK，确认序号为收到的序号加1。和SYN一样，一个FIN将占用一个序号。</li></ul><p>因为客户端A已经确定要关闭连接，所以此时客户端A不往服务器B发送数据，但是服务器B可能还是会发送数据给客户端A，所以要让服务器B关闭客户端A的连接</p><p>所以客户端A请求关闭连接只是单方面的关闭，不代表说服务器B就想要关闭连接了</p><ul><li>服务器B关闭与客户端A的连接，发送一个FIN给客户端A。</li><li>客户端A发回ACK报文确认，并将确认序号设置为收到序号加1。</li></ul><p>客户端A收到服务器B发送的FIN信号后，需要等待2MSL，</p><ul><li>原因：<ul><li>保证客户端ACK报文能够到达服务器B，如果ACK报文没有到达服务器B，服务器B会认为客户端A没有收到服务器B第三步的FIN信号，于是服务器B会超时重传这个FIN信号。如果不等待2MSL，直接关闭，那么ACK报文可能就丢失了。</li><li>MSL是Maximum Segment Lifetime，报文最大生存时间，等待2MSL，可以使连接持续时间内的所有产生的报文段都消失，使得下一次新的连接中不会出现旧的报文。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20170305155824486?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvTEZfMjAxNg==/font/5a6L5L2T/fontsize/40
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>TCP三次握手</title>
    <link href="http://yoursite.com/2020/03/19/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/"/>
    <id>http://yoursite.com/2020/03/19/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/</id>
    <published>2020-03-18T17:45:20.000Z</published>
    <updated>2020-03-21T15:05:41.513Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PAR协议"><a href="#PAR协议" class="headerlink" title="PAR协议"></a>PAR协议</h2><p>首先要知道TCP可靠传输是依赖于PAR协议的，即支持重传的肯定确认协议（Positive Acknowledgement with Re-transmission）。</p><p>传输层的协议数据单元叫做段(Segment)，现在一个设备使用PAR重发单元数据，直到受到一个确认(acknowledgement)。如果在接收端收到了损坏的数据单元，接收端就会抛弃这个段。所以发送方将会重发那些没有收到确认的数据单元。</p><ul><li>Step 1 (SYN) : 第一步，客户端想要跟服务器建立连接，首先会发送一个含有SYN信号的报文，告知服务器，客户端想要跟他进行连接，并且告诉服务器，客户端将从哪个序号开始发送数据</li><li>Step 2 (SYN + ACK): 服务器使用设置的SYN-ACK信号位响应客户端请求。ACK表示服务器接收到了上一步中客户端发送的报文，而SYN表示服务器将从哪里开始发送数据</li><li>Step 3 (ACK) : 最后一步，客户端收到了服务器的相应并且建立了一个可靠连接，并以此传输数据。</li></ul><h2 id="为什么不是二次握手？"><a href="#为什么不是二次握手？" class="headerlink" title="为什么不是二次握手？"></a>为什么不是二次握手？</h2><ul><li>如果是二次握手，客户端发送SYN给服务器，假设这个SYN堵塞了，长期滞留在某个节点。</li><li>再假设客户端与服务器又成功建立了连接，在连接释放后</li><li>如果滞留的那个SYN到达了服务器，服务器就会以为客户端要建立连接，于是创建Socket套接字，等待客户端发送数据。</li><li>于是返回SYN+ACK信号给客户端，可是客户端并没有要建立连接，于是会把这个SYN+ACK信号抛弃，而服务器就一直在等待客户端发送数据。</li><li>这就是二次握手的弊端，会出现滞留的SYN报文发送给服务器，造成服务器资源浪费。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;PAR协议&quot;&gt;&lt;a href=&quot;#PAR协议&quot; class=&quot;headerlink&quot; title=&quot;PAR协议&quot;&gt;&lt;/a&gt;PAR协议&lt;/h2&gt;&lt;p&gt;首先要知道TCP可靠传输是依赖于PAR协议的，即支持重传的肯定确认协议（Positive Acknowledgeme
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>计算机网络-1</title>
    <link href="http://yoursite.com/2020/03/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-1/"/>
    <id>http://yoursite.com/2020/03/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-1/</id>
    <published>2020-03-15T09:07:16.000Z</published>
    <updated>2020-03-15T09:10:23.737Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="ISP"><a href="#ISP" class="headerlink" title="ISP"></a>ISP</h3><p>互联网服务提供商Internet Service Provider</p><h3 id="主机之间的通信方式"><a href="#主机之间的通信方式" class="headerlink" title="主机之间的通信方式"></a>主机之间的通信方式</h3><ul><li>客户端-服务器（CS）</li><li>对等（P2P）</li></ul><h3 id="电路交换与分组交换"><a href="#电路交换与分组交换" class="headerlink" title="电路交换与分组交换"></a>电路交换与分组交换</h3><ul><li>电路交换用于电话通信系统，两个用户之间要建立专用的物理链路，但是对该物理链路的占用率很低。</li><li>分组交换，每个分组都有首部和尾部，包含源地址和目的地址等控制信息，在同一个传输线路上同时有多个分组互相不会影响。</li></ul><h3 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h3><ul><li>排队+处理+传输+传播</li></ul><h4 id="排队时延"><a href="#排队时延" class="headerlink" title="排队时延"></a>排队时延</h4><p>输入输出队列中的排队等待时间，取决于网络当前的通信量。</p><h4 id="处理时延"><a href="#处理时延" class="headerlink" title="处理时延"></a>处理时延</h4><p>收到分组后所处理需要的时间</p><ul><li>分析首部</li><li>从分组中提取数据</li><li>差错检验</li><li>查找适当的路由</li></ul><h4 id="传输时延"><a href="#传输时延" class="headerlink" title="传输时延"></a>传输时延</h4><p>主机或路由器传输数据帧所需时间</p><p>传输时延 = 数据帧长度/传输速率</p><h4 id="传播时延"><a href="#传播时延" class="headerlink" title="传播时延"></a>传播时延</h4><p>电磁波在信道中传播所需花费的时间，速率接近光速</p><p>传播时延 = 信道长度/电磁波在信道上的传播速率</p><h3 id="三个体系结构"><a href="#三个体系结构" class="headerlink" title="三个体系结构"></a>三个体系结构</h3><p><img src="https://uploadfiles.nowcoder.com/images/20180410/4039680_1523328907031_09DD8C2662B96CE14928333F055C5580" alt=""></p><p><img src="https://uploadfiles.nowcoder.com/images/20180410/4039680_1523328974264_E4E1F3318AF5F32719A15808E8D8458B" alt=""></p><h4 id="OSI"><a href="#OSI" class="headerlink" title="OSI"></a>OSI</h4><ul><li>应用层</li><li>表示层</li><li>会话层</li><li>运输层</li><li>网络层</li><li>数据链路层</li><li>物理层</li></ul><h4 id="五层协议"><a href="#五层协议" class="headerlink" title="五层协议"></a>五层协议</h4><ul><li>应用层</li><li>运输层</li><li>网络层</li><li>数据链路层</li><li>物理层</li></ul><h4 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h4><ul><li>应用层</li><li>运输层</li><li>网际层</li><li>网络接口层</li></ul><h4 id="每层对应的协议"><a href="#每层对应的协议" class="headerlink" title="每层对应的协议"></a>每层对应的协议</h4><ul><li>物理层：RJ45、CLOCK、IEEE802.3 （中继器，集线器）</li><li>数据链路：PPP、FR、HDLC、VLAN、MAC （网桥，交换机）</li><li>网络层：IP、ICMP、ARP、RARP、OSPF、IPX、RIP、IGRP、 （路由器）</li><li>传输层：TCP、UDP、SPX</li><li>会话层：NFS、SQL、NETBIOS、RPC</li><li>表示层：JPEG、MPEG、ASII</li><li>应用层：FTP、DNS、Telnet、SMTP、HTTP、WWW、NFS</li></ul><h4 id="每层的作用"><a href="#每层的作用" class="headerlink" title="每层的作用"></a>每层的作用</h4><ul><li>物理层：通过媒介传输比特,确定机械及电气规范（比特Bit）</li><li>数据链路层：将比特组装成帧和点到点的传递（帧Frame）</li><li>网络层：负责数据包从源到宿的传递和网际互连（包PackeT）</li><li>传输层：提供端到端的可靠报文传递和错误恢复（段Segment）</li><li>会话层：建立、管理和终止会话（会话协议数据单元SPDU）</li><li>表示层：对数据进行翻译、加密和压缩（表示协议数据单元PPDU）</li><li>应用层：允许访问OSI环境的手段（应用协议数据单元APDU）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;h3 id=&quot;ISP&quot;&gt;&lt;a href=&quot;#ISP&quot; class=&quot;headerlink&quot; title=&quot;ISP&quot;&gt;&lt;/a&gt;ISP&lt;/h3&gt;&lt;p
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Leetcode-不会做的题</title>
    <link href="http://yoursite.com/2020/01/27/Leetcode-%E4%B8%8D%E4%BC%9A%E5%81%9A%E7%9A%84%E9%A2%98/"/>
    <id>http://yoursite.com/2020/01/27/Leetcode-%E4%B8%8D%E4%BC%9A%E5%81%9A%E7%9A%84%E9%A2%98/</id>
    <published>2020-01-26T16:00:06.000Z</published>
    <updated>2020-01-26T17:00:56.363Z</updated>
    
    <content type="html"><![CDATA[<h2 id="抽屉方法"><a href="#抽屉方法" class="headerlink" title="抽屉方法"></a>抽屉方法</h2><p><a href="https://leetcode-cn.com/problems/find-all-numbers-disappeared-in-an-array/" target="_blank" rel="noopener">448. 找到所有数组中消失的数字</a></p><h2 id="二叉树中任意两点之间的数量关系"><a href="#二叉树中任意两点之间的数量关系" class="headerlink" title="二叉树中任意两点之间的数量关系"></a>二叉树中任意两点之间的数量关系</h2><p><a href="https://leetcode-cn.com/problems/diameter-of-binary-tree/submissions/" target="_blank" rel="noopener">543. 二叉树的直径</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;抽屉方法&quot;&gt;&lt;a href=&quot;#抽屉方法&quot; class=&quot;headerlink&quot; title=&quot;抽屉方法&quot;&gt;&lt;/a&gt;抽屉方法&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/find-all-numbers-dis
      
    
    </summary>
    
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>二叉树类型</title>
    <link href="http://yoursite.com/2020/01/23/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2020/01/23/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%B1%BB%E5%9E%8B/</id>
    <published>2020-01-22T16:56:05.000Z</published>
    <updated>2020-03-18T17:48:31.884Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul><li>左子树的值比节点的值要小</li><li>右子树的值比节点的值要大</li><li>左右子树也是二叉搜索树</li></ul><p><img src="https://media.geeksforgeeks.org/wp-content/uploads/BSTSearch.png" alt=""></p><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>根据左右节点的大小比较来进行有序的搜索即可。</p><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>插入的节点只会插入到叶子节点上去，只需比较大小，找到要插入的叶子节点的位置即可。</p><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p>二叉搜索树的中序遍历会产生有序的输出。</p><p>因为中序遍历是左中右遍历，对应的数值大小是小中大。</p><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><ul><li>删除的为叶子节点，则直接删除即可。</li><li>删除的节点只有一个子节点，则将子节点复制到删除的节点的位置即可。</li><li>删除的节点有两个子节点，则将删除节点的中序遍历的后续节点复制到删除节点处。</li></ul><h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><ul><li>每个节点都有红或黑的颜色</li><li>树根永远是黑色</li><li>红色节点不能有红色的父节点或红色的子节点（没有两个相邻的红色节点）</li><li>从一个节点到它的任意一个后续的空节点的任意路径上，有着同样数量的黑色节点</li></ul><h3 id="为什么要用红黑树"><a href="#为什么要用红黑树" class="headerlink" title="为什么要用红黑树"></a>为什么要用红黑树</h3><p>普通的二叉树可能会由于倾斜，造成一些操作达到O(n)时间，但对于红黑树来说，红黑树会保证高度永远为O(logn)，所以它的操作的复杂度也会保持在O(logn)</p><h3 id="对比AVL树"><a href="#对比AVL树" class="headerlink" title="对比AVL树"></a>对比AVL树</h3><p>AVL树是带有平衡条件的二叉搜索树，每个节点的左右子树的高度差小于等于1。为了保持平衡条件，在插入和删除操作中会产生旋转操作。</p><p>所以如果要频繁地做插入和删除操作，红黑树会更好。</p><p>如果查找比较频繁，AVL树会更好。</p><h2 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h2><p>B树首先是一个自平衡的搜索树。当有大量数据要读取时，主存不够用，需要从硬盘中读取数据。为了减少硬盘的访问次数，大部分的树操作需要O(h)次硬盘访问。</p><p>而B树很宽，可以尽可能地放入key来降低高度，通常B树的节点大小等于硬盘的block大小。因此高度降低了，总的硬盘访问次数就要比AVL、红黑树少。</p><h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><ul><li>所有的叶子节点都在同一高度</li><li>一个B树由最小度t来定义，t的值取决于硬盘的block大小</li><li>除了根以外的节点，都必须要包含至少t-1个key，根可以只有一个key</li><li>所有的节点可能包含最多2t-1个key</li><li>一个节点的子节点数量等于它自身的key的数量加一</li><li>一个节点的所有key递增排序。在两个key，k1和k2之间的子节点包含了所有在k1和k2范围内的所有key</li><li>B树从根变大或缩小。BST则可以向下变大或缩小(B-Tree grows and shrinks from the root which is unlike Binary Search Tree. Binary Search Trees grow downward and also shrink from downward.)</li><li>与其他BST一样，查找、插入、删除的复杂度为O(logn)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;二叉搜索树&quot;&gt;&lt;a href=&quot;#二叉搜索树&quot; class=&quot;headerlink&quot; title=&quot;二叉搜索树&quot;&gt;&lt;/a&gt;二叉搜索树&lt;/h2&gt;&lt;h3 id=&quot;属性&quot;&gt;&lt;a href=&quot;#属性&quot; class=&quot;headerlink&quot; title=&quot;属性&quot;&gt;&lt;/a&gt;属
      
    
    </summary>
    
    
    
      <category term="二叉树" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>基础算法-排序</title>
    <link href="http://yoursite.com/2020/01/23/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2020/01/23/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F/</id>
    <published>2020-01-22T16:50:06.000Z</published>
    <updated>2020-03-31T06:54:16.033Z</updated>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#冒泡排序">冒泡排序</a></li><li><a href="#选择排序">选择排序</a></li><li><a href="#插入排序">插入排序</a></li><li><a href="#希尔排序">希尔排序</a></li><li><a href="#归并排序">归并排序</a></li><li><a href="#快速排序">快速排序</a><ul><li><a href="#放置">放置</a></li></ul></li><li><a href="#计数桶基数排序">计数、桶、基数排序</a><ul><li><a href="#计数排序">计数排序</a></li><li><a href="#桶排序">桶排序</a></li><li><a href="#基数排序">基数排序</a></li></ul></li></ul><!-- /TOC --><p><a href="https://www.runoob.com/w3cnote/ten-sorting-algorithm.html" target="_blank" rel="noopener">https://www.runoob.com/w3cnote/ten-sorting-algorithm.html</a></p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>冒泡排序的交换是比较<strong>相邻两个元素</strong>的大小后再进行交换,<strong>最大的数会冒泡到最后面去</strong>。</p><p>复杂度：O(n²)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;n-i<span class="number">-1</span>;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[j]&gt;nums[j+<span class="number">1</span>])</span><br><span class="line">            swap(nums[j],nums[j+<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>选择排序就是找最小值，然后放在最前面。</p><p>复杂度：O(n²)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)    <span class="comment">//i在这里相当于慢指针，确定放置的位置</span></span><br><span class="line">&#123;</span><br><span class="line">    min_idx = i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>;j&lt;n;j++)    <span class="comment">//j在这里相当于快指针，寻找最小值</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[min_idx]&gt;nums[j])   <span class="comment">//位置j的数值更小，更新最小值位置</span></span><br><span class="line">            min_idx = j;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(nums[min_idx],nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>选取一个数将这个数插入到有序部分，插入时只需要移动有序部分。</p><p>有序部分放在前面，后面的数不断往前面插入。</p><p>复杂度：O(n²)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    key = nums[i];</span><br><span class="line">    j = i - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//由这个判定条件来将有序部分后移</span></span><br><span class="line">    <span class="comment">//直到找到了一个比要搬运的数值要小的数，就可以插入了</span></span><br><span class="line">    <span class="keyword">while</span>(j &gt;= <span class="number">0</span> &amp;&amp; nums[j] &gt; key)  </span><br><span class="line">    &#123;</span><br><span class="line">        nums[j+<span class="number">1</span>] = nums[j];</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line">    nums[j+<span class="number">1</span>] = key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p><a href="https://blog.csdn.net/qq_39207948/article/details/80006224" target="_blank" rel="noopener">https://blog.csdn.net/qq_39207948/article/details/80006224</a></p><p>是插入排序的改进版，插入排序对于数据小并且原数据基本有序的情况下效率很高，但是对于数据大，且十分无序的情况下效率很低。</p><p>于是希尔排序将数组按照某个间隔序列进行划分，对划分后的子数组来进行插入排序。</p><p>代码跟插入排序十分类似。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shell_sort</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[], <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//生成间隔序列</span></span><br><span class="line">    <span class="keyword">while</span> (h &lt; length / <span class="number">3</span>) &#123;</span><br><span class="line">        h = <span class="number">3</span> * h + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//插入排序</span></span><br><span class="line">    <span class="keyword">while</span> (h &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//注意这个位置 i 的写法很怪</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="comment">//将子数组的有序部分后移，找到一个比自身小的数就停止</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= h &amp;&amp; <span class="built_in">array</span>[j] &lt; <span class="built_in">array</span>[j - h]; j -= h) &#123;</span><br><span class="line">                swap(<span class="built_in">array</span>[j], <span class="built_in">array</span>[j - h]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        h = h / <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p><a href="https://www.runoob.com/w3cnote/implementation-of-merge-sort.html" target="_blank" rel="noopener">https://www.runoob.com/w3cnote/implementation-of-merge-sort.html</a></p><p>基本思想：</p><ul><li><strong>合并两个有序的序列</strong></li><li><strong>需要再新建一个空的数组</strong></li><li>将两个有序序列的数不断放入空的数组中。</li></ul><p>获得有序序列的方法：</p><ul><li>将数组不断分割，当个数为1是，就是有序的了，之后开始合并有序序列。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span> nums[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l+(r-l)/<span class="number">2</span>;    </span><br><span class="line">        mergeSort(nums,l,mid);  <span class="comment">//进行分割</span></span><br><span class="line">        mergeSort(nums,mid+<span class="number">1</span>,r);</span><br><span class="line"></span><br><span class="line">        merge(nums,l,mid,r);    <span class="comment">//胡兵有序数组</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> nums[], <span class="keyword">int</span> l, <span class="keyword">int</span> mid, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = l;</span><br><span class="line">    <span class="keyword">int</span> j = mid+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> temp[r-l+<span class="number">1</span>];    <span class="comment">//用于存储合并的数组</span></span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r) <span class="comment">//注意是等于</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//合并两个有序数组</span></span><br><span class="line">        <span class="keyword">if</span>(nums[i]&lt;nums[j])</span><br><span class="line">            temp[k++] = nums[i++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            temp[k++] = nums[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//合并剩下的数</span></span><br><span class="line">     <span class="keyword">while</span> (i &lt;= mid)</span><br><span class="line">        temp[k++] = nums[i++];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r)</span><br><span class="line">        temp[k++] = nums[j++];</span><br><span class="line">    <span class="comment">//再把合并的数组复制回去</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        nums[l+i] = temp[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到，每次合并操作的时候都会产生一个新的数组，会很浪费空间，所以可以对归并排序的函数进行再次封装。</p><p>传入一个大小为n的数组作为参数，从而防止反复创建新数组。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">MergeSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    mergesort(a, <span class="number">0</span>, n - <span class="number">1</span>, p);</span><br><span class="line">    <span class="keyword">delete</span>[] p;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p><a href="https://www.runoob.com/w3cnote/quick-sort.html" target="_blank" rel="noopener">https://www.runoob.com/w3cnote/quick-sort.html</a></p><p>基本思想：</p><ul><li>从数组中找出一个数作为<strong>基准</strong></li><li>将小于基准的数放在基准的右边，大于基准的放在基准的左边。</li><li>关键在于如何放置。</li></ul><h3 id="放置"><a href="#放置" class="headerlink" title="放置"></a>放置</h3><ol><li>对于数组中一个给定的区间。</li><li>一般取区间的第一个数，<strong>将这个数赋值给一个x，临时存储</strong>。</li><li>初始化:i = 区间的头位置，j = 区间的末位置<ol><li>先由j从区间末尾向前扫描，寻找一个小于基准的数，找到之后放在a[i]中，i++。</li><li>再由i从区间的头向后扫描，寻找一个大于基准的数，找到之后放在a[j]中，j–。</li><li>i==j时，结束，并以i为中心位置，重新划分左右区间并递归。</li></ol></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> s[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> i = l, j = r;</span><br><span class="line">        <span class="keyword">int</span> x = s[l];   <span class="comment">//基准数字</span></span><br><span class="line">        <span class="keyword">while</span>(i&lt;j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//先从后向前扫描</span></span><br><span class="line">            <span class="keyword">while</span>(i&lt;j&amp;&amp;s[j]&gt;=x)</span><br><span class="line">                j--;</span><br><span class="line">            <span class="comment">//说明找到一个小的数，要放到前面去，即i的位置</span></span><br><span class="line">            <span class="keyword">if</span>(i&lt;j)</span><br><span class="line">                s[i++] = s[j];</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//再从前向后扫描</span></span><br><span class="line">            <span class="keyword">while</span>(i&lt;j&amp;&amp;s[i]&lt;=x)</span><br><span class="line">                i++;</span><br><span class="line">            <span class="comment">//说明找到一个很大的数，要放到后面去，即j的位置</span></span><br><span class="line">            <span class="keyword">if</span>(i&lt;j)</span><br><span class="line">                s[j--] = s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        s[i] = x;   <span class="comment">//不要忘记把基准数字放到数组中间</span></span><br><span class="line">        quick_sort(s,l,i<span class="number">-1</span>);</span><br><span class="line">        quick_sort(s,i+<span class="number">1</span>,r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="计数、桶、基数排序"><a href="#计数、桶、基数排序" class="headerlink" title="计数、桶、基数排序"></a>计数、桶、基数排序</h2><p>这三个排序都用到了“桶”的概念</p><h3 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h3><p><a href="https://www.cnblogs.com/kyoner/p/10604781.html" target="_blank" rel="noopener">https://www.cnblogs.com/kyoner/p/10604781.html</a></p><p>顾名思义，将数组的每个数nums[i]放进bucket[nums[i]]中，并将bucket[nums[i]]+1，以此计数。然后在遍历一遍bucket，直接输出。</p><p>如果数组中最大数和最小数相差太大，会导致计数排序的空间过大。</p><h3 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h3><p><a href="https://blog.csdn.net/developer1024/article/details/79770240" target="_blank" rel="noopener">https://blog.csdn.net/developer1024/article/details/79770240</a></p><ul><li>桶排序也是一样，需要将每个数放进桶中。</li><li>但这里放入的方式，是通过某种函数映射放入的，会有多个不同的数放入同一个桶中。</li><li>再针对每个桶进行单独进行排序算法。<ul><li>但是这里更好的方式是，桶中装入链表，当一个数放入该桶中，就需要遍历这个链表，寻找插入节点，于是对于单独的桶排序可以达到O(n)</li></ul></li></ul><p>这里的桶排序的桶数量可以是任意的，如果桶的数量等于数组的大小，我认为这个桶排序就会变成计数排序。</p><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><p><a href="https://www.cnblogs.com/skywang12345/p/3603669.html" target="_blank" rel="noopener">https://www.cnblogs.com/skywang12345/p/3603669.html</a></p><ul><li>我更愿意把它叫做位数排序。</li><li>首先根据每个数的个位，放入对应的序号的桶中。</li><li>从小到大输出桶，再根据每个数的十位，放入对应的序号的桶中。</li><li>从小到大输出桶，再根据每个数的百位，放入对应的序号的桶中。</li><li>以此类推，到了最后就可以成功排序了。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- TOC --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#冒泡排序&quot;&gt;冒泡排序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#选择排序&quot;&gt;选择排序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#插入排序&quot;&gt;插入排序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#希尔排序&quot;
      
    
    </summary>
    
    
    
      <category term="基础算法" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
