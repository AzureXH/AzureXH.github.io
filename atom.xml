<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Azure XH</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-19T08:08:47.951Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>AzureXH</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>http与https</title>
    <link href="http://yoursite.com/2020/03/19/http%E4%B8%8Ehttps/"/>
    <id>http://yoursite.com/2020/03/19/http%E4%B8%8Ehttps/</id>
    <published>2020-03-19T08:00:41.000Z</published>
    <updated>2020-03-19T08:08:47.951Z</updated>
    
    <content type="html"><![CDATA[<p>HTTP协议和HTTPS协议区别如下：</p><ol><li><p>HTTP协议是以明文的方式在网络中传输数据，而HTTPS协议传输的数据则是经过TLS加密后的，HTTPS具有更高的安全性</p></li><li><p>HTTPS在TCP三次握手阶段之后，还需要进行SSL 的handshake，协商加密使用的对称加密密钥</p></li><li><p>HTTPS协议需要服务端申请证书，浏览器端安装对应的根证书</p></li><li><p>HTTP协议端口是80，HTTPS协议端口是443</p></li></ol><h2 id="HTTPS优点："><a href="#HTTPS优点：" class="headerlink" title="HTTPS优点："></a>HTTPS优点：</h2><ul><li><p>HTTPS传输数据过程中使用密钥进行加密，所以安全性更高</p></li><li><p>HTTPS协议可以认证用户和服务器，确保数据发送到正确的用户和服务器</p></li></ul><h2 id="HTTPS缺点："><a href="#HTTPS缺点：" class="headerlink" title="HTTPS缺点："></a>HTTPS缺点：</h2><ul><li><p>HTTPS握手阶段延时较高：由于在进行HTTP会话之前还需要进行SSL握手，因此HTTPS协议握手阶段延时增加</p></li><li><p>HTTPS部署成本高：一方面HTTPS协议需要使用证书来验证自身的安全性，所以需要购买CA证书；另一方面由于采用HTTPS协议需要进行加解密的计算，占用CPU资源较多，需要的服务器配置或数目高</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;HTTP协议和HTTPS协议区别如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;HTTP协议是以明文的方式在网络中传输数据，而HTTPS协议传输的数据则是经过TLS加密后的，HTTPS具有更高的安全性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;HTTPS在TCP三次握手阶段之后，还需要进行
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数据库</title>
    <link href="http://yoursite.com/2020/03/19/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://yoursite.com/2020/03/19/%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2020-03-19T07:41:24.000Z</published>
    <updated>2020-03-19T08:33:09.922Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库事务"><a href="#数据库事务" class="headerlink" title="数据库事务"></a>数据库事务</h2><p>数据库事务(Database Transaction) ，<strong>是指作为单个逻辑工作单元执行的一系列操作</strong>，<strong>要么完全地执行，要么完全地不执行</strong>。事务处理可以确保除非事务性单元内的所有操作都成功完成，否则不会永久更新面向数据的资源。通过将一组相关操作组合为一个要么全部成功要么全部失败的单元，可以简化错误恢复并使应用程序更加可靠。一个逻辑工作单元要成为事务，必须满足所谓的ACID（原子性、一致性、隔离性和持久性）属性。事务是数据库运行中的逻辑工作单位，由DBMS中的事务管理子系统负责事务的处理。</p><h2 id="事物的一致性"><a href="#事物的一致性" class="headerlink" title="事物的一致性"></a>事物的一致性</h2><p>事务（Transaction）是由一系列对系统中数据进行访问与更新的操作所组成的一个程序执行逻辑单元。事务是DBMS中最基础的单位，事务不可分割。<br>事务具有4个基本特征，分别是：原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Duration），简称ACID。</p><h3 id="原子性（Atomicity）"><a href="#原子性（Atomicity）" class="headerlink" title="原子性（Atomicity）"></a>原子性（Atomicity）</h3><p>原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，[删删删]因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。</p><h3 id="一致性（Consistency）"><a href="#一致性（Consistency）" class="headerlink" title="一致性（Consistency）"></a>一致性（Consistency）</h3><p>一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。</p><p>拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。</p><h3 id="隔离性（Isolation）"><a href="#隔离性（Isolation）" class="headerlink" title="隔离性（Isolation）"></a>隔离性（Isolation）</h3><p>隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。</p><p>即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。</p><p>多个事务并发访问时，事务之间是隔离的，一个事务不应该影响其它事务运行效果。这指的是在并发环境中，当不同的事务同时操纵相同的数据时，每个事务都有各自的完整数据空间。由并发事务所做的修改必须与任何其他并发事务所做的修改隔离。</p><ul><li><p>不同的隔离级别：</p><ul><li>Read Uncommitted（读取未提交[添加中文释义]内容）：最低的隔离级别，什么都不需要做，一个事务可以读到另一个事务未提交的结果。所有的并发事务问题都会发生。</li><li>Read Committed（读取提交内容）：只有在事务提交后，其更新结果才会被其他事务看见。可以解决脏读问题。</li><li>Repeated Read（可重复读）：在一个事务中，对于同一份数据的读取结果总是相同的，无论是否有其他事务对这份数据进行操作，以及这个事务是否提交。可以解决脏读、不可重复读。</li><li>Serialization（可串行化）：事务串行化执行，隔离级别最高，牺牲了系统的并发性。可以解决并发事务的所有问题。</li></ul></li></ul><h3 id="持久性（Durability）"><a href="#持久性（Durability）" class="headerlink" title="持久性（Durability）"></a>持久性（Durability）</h3><p>持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</p><p>例如我们在使用JDBC操作数据库时，在提交事务方法后，提示用户事务操作完成，当我们程序执行完成直到看到提示后，就可以认定事务以及正确提交，即使这时候数据库出现了问题，也必须要将我们的事务完全执行完成，否则就会造成我们看到提示事务处理完毕，但是数据库因为故障而没有执行事务的重大错误。</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>数据库索引是为了增加查询速度而对表字段附加的一种标识，是对数据库表中一列或多列的值进行排序的一种结构。</p><p>DB在执行一条Sql语句的时候，默认的方式是根据搜索条件进行全表扫描，遇到匹配条件的就加入搜索结果集合。如果我们对某一字段增加索引，查询时就会先去索引列表中一次定位到特定值的行数，大大减少遍历匹配的行数，所以能明显增加查询的速度。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。</p><p>可以大大加快数据的检索速度，这也是创建索引的最主要的原因。</p><p>可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。</p><p>在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。</p><p>通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li><p>创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。</p></li><li><p>索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立聚簇索引，那么需要的空间就会更大。</p></li><li><p>当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度。</p></li></ul><h3 id="添加索引原则"><a href="#添加索引原则" class="headerlink" title="添加索引原则"></a>添加索引原则</h3><ul><li><p><strong>在查询中很少使用或者参考的列不应该创建索引</strong>。这是因为，既然这些列很少使用到，因此有索引或者无索引，并不能提高查询速度。相反，由于增加了索引，反而降低了系统的维护速度和增大了空间需求。</p></li><li><p><strong>只有很少数据值的列也不应该增加索引</strong>。这是因为，由于这些列的取值很少，例如人事表的性别列，在查询的结果中，结果集的数据行占了表中数据行的很大比例，即需要在表中搜索的数据行的比例很大。增加索引，并不能明显加快检索速度。</p></li><li><p><strong>定义为text、image和bit数据类型的列不应该增加索引</strong>。这是因为，这些列的数据量要么相当大，要么取值很少。(数据量太大也不适合增加索引)</p></li><li><p><strong>当修改性能远远大于检索性能时，不应该创建索引</strong>。这是因为，修改性能和检索性能是互相矛盾的。当增加索引时，会提高检索性能，但是会降低修改性能。当减少索引时，会提高修改性能，降低检索性能。因此，当修改性能远远大于检索性能时，不应该创建索引。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据库事务&quot;&gt;&lt;a href=&quot;#数据库事务&quot; class=&quot;headerlink&quot; title=&quot;数据库事务&quot;&gt;&lt;/a&gt;数据库事务&lt;/h2&gt;&lt;p&gt;数据库事务(Database Transaction) ，&lt;strong&gt;是指作为单个逻辑工作单元执行的一系列操作&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>堆</title>
    <link href="http://yoursite.com/2020/03/19/%E5%A0%86/"/>
    <id>http://yoursite.com/2020/03/19/%E5%A0%86/</id>
    <published>2020-03-19T07:21:02.000Z</published>
    <updated>2020-03-19T07:37:14.783Z</updated>
    
    <content type="html"><![CDATA[<h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>堆是一个树形结构，是一个完全二叉树的结构，分为最大堆，最小堆。</p><h3 id="大顶堆"><a href="#大顶堆" class="headerlink" title="大顶堆"></a>大顶堆</h3><p>根节点的值是所有节点的值中最大的，并且对每个节点都递归适用该规则</p><h3 id="小顶堆"><a href="#小顶堆" class="headerlink" title="小顶堆"></a>小顶堆</h3><p>根节点的值是所有节点的值中最小的，并且对每个节点都递归适用该规则</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;性质&quot;&gt;&lt;a href=&quot;#性质&quot; class=&quot;headerlink&quot; title=&quot;性质&quot;&gt;&lt;/a&gt;性质&lt;/h2&gt;&lt;p&gt;堆是一个树形结构，是一个完全二叉树的结构，分为最大堆，最小堆。&lt;/p&gt;
&lt;h3 id=&quot;大顶堆&quot;&gt;&lt;a href=&quot;#大顶堆&quot; class=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Spring-IoC和DI</title>
    <link href="http://yoursite.com/2020/03/19/Spring-IoC%E5%92%8CDI/"/>
    <id>http://yoursite.com/2020/03/19/Spring-IoC%E5%92%8CDI/</id>
    <published>2020-03-19T07:11:30.000Z</published>
    <updated>2020-03-19T07:37:12.841Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.iteye.com/blog/jinnianshilongnian-1413846" target="_blank" rel="noopener">https://www.iteye.com/blog/jinnianshilongnian-1413846</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.iteye.com/blog/jinnianshilongnian-1413846&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.iteye.com/blog/jinnianshilongn
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>TCP四次挥手</title>
    <link href="http://yoursite.com/2020/03/19/TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
    <id>http://yoursite.com/2020/03/19/TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</id>
    <published>2020-03-19T04:33:17.000Z</published>
    <updated>2020-03-19T04:33:17.545Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>TCP三次握手</title>
    <link href="http://yoursite.com/2020/03/19/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/"/>
    <id>http://yoursite.com/2020/03/19/TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/</id>
    <published>2020-03-18T17:45:20.000Z</published>
    <updated>2020-03-19T08:08:24.728Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PAR协议"><a href="#PAR协议" class="headerlink" title="PAR协议"></a>PAR协议</h2><p>首先要知道TCP可靠传输是依赖于PAR协议的，即支持重传的肯定确认协议（Positive Acknowledgement with Re-transmission）。</p><p>传输层的协议数据单元叫做段(Segment)，现在一个设备使用PAR重发单元数据，直到受到一个确认(acknowledgement)。如果在接收端收到了损坏的数据单元，接收端就会抛弃这个段。所以发送方将会重发那些没有收到确认的数据单元。</p><ul><li>Step 1 (SYN) : 第一步，客户端想要跟服务器建立连接，首先会发送一个含有SYN信号的报文，告知服务器，客户端想要跟他进行连接，并且告诉服务器，客户端将从哪个序号开始发送数据</li><li>Step 2 (SYN + ACK): 服务器使用设置的SYN-ACK信号位响应客户端请求。ACK表示服务器接收到了上一步中客户端发送的报文，而SYN表示服务器将从哪里开始发送数据</li><li>Step 3 (ACK) : 最后一步，客户端收到了服务器的相应并且建立了一个可靠连接，并以此传输数据。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;PAR协议&quot;&gt;&lt;a href=&quot;#PAR协议&quot; class=&quot;headerlink&quot; title=&quot;PAR协议&quot;&gt;&lt;/a&gt;PAR协议&lt;/h2&gt;&lt;p&gt;首先要知道TCP可靠传输是依赖于PAR协议的，即支持重传的肯定确认协议（Positive Acknowledgeme
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>面试准备</title>
    <link href="http://yoursite.com/2020/03/19/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/"/>
    <id>http://yoursite.com/2020/03/19/%E9%9D%A2%E8%AF%95%E5%87%86%E5%A4%87/</id>
    <published>2020-03-18T16:07:10.000Z</published>
    <updated>2020-03-18T16:07:10.710Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>计算机网络-1</title>
    <link href="http://yoursite.com/2020/03/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-1/"/>
    <id>http://yoursite.com/2020/03/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-1/</id>
    <published>2020-03-15T09:07:16.000Z</published>
    <updated>2020-03-15T09:10:23.737Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="ISP"><a href="#ISP" class="headerlink" title="ISP"></a>ISP</h3><p>互联网服务提供商Internet Service Provider</p><h3 id="主机之间的通信方式"><a href="#主机之间的通信方式" class="headerlink" title="主机之间的通信方式"></a>主机之间的通信方式</h3><ul><li>客户端-服务器（CS）</li><li>对等（P2P）</li></ul><h3 id="电路交换与分组交换"><a href="#电路交换与分组交换" class="headerlink" title="电路交换与分组交换"></a>电路交换与分组交换</h3><ul><li>电路交换用于电话通信系统，两个用户之间要建立专用的物理链路，但是对该物理链路的占用率很低。</li><li>分组交换，每个分组都有首部和尾部，包含源地址和目的地址等控制信息，在同一个传输线路上同时有多个分组互相不会影响。</li></ul><h3 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h3><ul><li>排队+处理+传输+传播</li></ul><h4 id="排队时延"><a href="#排队时延" class="headerlink" title="排队时延"></a>排队时延</h4><p>输入输出队列中的排队等待时间，取决于网络当前的通信量。</p><h4 id="处理时延"><a href="#处理时延" class="headerlink" title="处理时延"></a>处理时延</h4><p>收到分组后所处理需要的时间</p><ul><li>分析首部</li><li>从分组中提取数据</li><li>差错检验</li><li>查找适当的路由</li></ul><h4 id="传输时延"><a href="#传输时延" class="headerlink" title="传输时延"></a>传输时延</h4><p>主机或路由器传输数据帧所需时间</p><p>传输时延 = 数据帧长度/传输速率</p><h4 id="传播时延"><a href="#传播时延" class="headerlink" title="传播时延"></a>传播时延</h4><p>电磁波在信道中传播所需花费的时间，速率接近光速</p><p>传播时延 = 信道长度/电磁波在信道上的传播速率</p><h3 id="三个体系结构"><a href="#三个体系结构" class="headerlink" title="三个体系结构"></a>三个体系结构</h3><p><img src="https://uploadfiles.nowcoder.com/images/20180410/4039680_1523328907031_09DD8C2662B96CE14928333F055C5580" alt=""></p><p><img src="https://uploadfiles.nowcoder.com/images/20180410/4039680_1523328974264_E4E1F3318AF5F32719A15808E8D8458B" alt=""></p><h4 id="OSI"><a href="#OSI" class="headerlink" title="OSI"></a>OSI</h4><ul><li>应用层</li><li>表示层</li><li>会话层</li><li>运输层</li><li>网络层</li><li>数据链路层</li><li>物理层</li></ul><h4 id="五层协议"><a href="#五层协议" class="headerlink" title="五层协议"></a>五层协议</h4><ul><li>应用层</li><li>运输层</li><li>网络层</li><li>数据链路层</li><li>物理层</li></ul><h4 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h4><ul><li>应用层</li><li>运输层</li><li>网际层</li><li>网络接口层</li></ul><h4 id="每层对应的协议"><a href="#每层对应的协议" class="headerlink" title="每层对应的协议"></a>每层对应的协议</h4><ul><li>物理层：RJ45、CLOCK、IEEE802.3 （中继器，集线器）</li><li>数据链路：PPP、FR、HDLC、VLAN、MAC （网桥，交换机）</li><li>网络层：IP、ICMP、ARP、RARP、OSPF、IPX、RIP、IGRP、 （路由器）</li><li>传输层：TCP、UDP、SPX</li><li>会话层：NFS、SQL、NETBIOS、RPC</li><li>表示层：JPEG、MPEG、ASII</li><li>应用层：FTP、DNS、Telnet、SMTP、HTTP、WWW、NFS</li></ul><h4 id="每层的作用"><a href="#每层的作用" class="headerlink" title="每层的作用"></a>每层的作用</h4><ul><li>物理层：通过媒介传输比特,确定机械及电气规范（比特Bit）</li><li>数据链路层：将比特组装成帧和点到点的传递（帧Frame）</li><li>网络层：负责数据包从源到宿的传递和网际互连（包PackeT）</li><li>传输层：提供端到端的可靠报文传递和错误恢复（段Segment）</li><li>会话层：建立、管理和终止会话（会话协议数据单元SPDU）</li><li>表示层：对数据进行翻译、加密和压缩（表示协议数据单元PPDU）</li><li>应用层：允许访问OSI环境的手段（应用协议数据单元APDU）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;h3 id=&quot;ISP&quot;&gt;&lt;a href=&quot;#ISP&quot; class=&quot;headerlink&quot; title=&quot;ISP&quot;&gt;&lt;/a&gt;ISP&lt;/h3&gt;&lt;p
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Leetcode-不会做的题</title>
    <link href="http://yoursite.com/2020/01/27/Leetcode-%E4%B8%8D%E4%BC%9A%E5%81%9A%E7%9A%84%E9%A2%98/"/>
    <id>http://yoursite.com/2020/01/27/Leetcode-%E4%B8%8D%E4%BC%9A%E5%81%9A%E7%9A%84%E9%A2%98/</id>
    <published>2020-01-26T16:00:06.000Z</published>
    <updated>2020-01-26T17:00:56.363Z</updated>
    
    <content type="html"><![CDATA[<h2 id="抽屉方法"><a href="#抽屉方法" class="headerlink" title="抽屉方法"></a>抽屉方法</h2><p><a href="https://leetcode-cn.com/problems/find-all-numbers-disappeared-in-an-array/" target="_blank" rel="noopener">448. 找到所有数组中消失的数字</a></p><h2 id="二叉树中任意两点之间的数量关系"><a href="#二叉树中任意两点之间的数量关系" class="headerlink" title="二叉树中任意两点之间的数量关系"></a>二叉树中任意两点之间的数量关系</h2><p><a href="https://leetcode-cn.com/problems/diameter-of-binary-tree/submissions/" target="_blank" rel="noopener">543. 二叉树的直径</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;抽屉方法&quot;&gt;&lt;a href=&quot;#抽屉方法&quot; class=&quot;headerlink&quot; title=&quot;抽屉方法&quot;&gt;&lt;/a&gt;抽屉方法&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/find-all-numbers-dis
      
    
    </summary>
    
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>二叉树类型</title>
    <link href="http://yoursite.com/2020/01/23/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%B1%BB%E5%9E%8B/"/>
    <id>http://yoursite.com/2020/01/23/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%B1%BB%E5%9E%8B/</id>
    <published>2020-01-22T16:56:05.000Z</published>
    <updated>2020-03-18T17:48:31.884Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul><li>左子树的值比节点的值要小</li><li>右子树的值比节点的值要大</li><li>左右子树也是二叉搜索树</li></ul><p><img src="https://media.geeksforgeeks.org/wp-content/uploads/BSTSearch.png" alt=""></p><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>根据左右节点的大小比较来进行有序的搜索即可。</p><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>插入的节点只会插入到叶子节点上去，只需比较大小，找到要插入的叶子节点的位置即可。</p><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p>二叉搜索树的中序遍历会产生有序的输出。</p><p>因为中序遍历是左中右遍历，对应的数值大小是小中大。</p><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><ul><li>删除的为叶子节点，则直接删除即可。</li><li>删除的节点只有一个子节点，则将子节点复制到删除的节点的位置即可。</li><li>删除的节点有两个子节点，则将删除节点的中序遍历的后续节点复制到删除节点处。</li></ul><h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><ul><li>每个节点都有红或黑的颜色</li><li>树根永远是黑色</li><li>红色节点不能有红色的父节点或红色的子节点（没有两个相邻的红色节点）</li><li>从一个节点到它的任意一个后续的空节点的任意路径上，有着同样数量的黑色节点</li></ul><h3 id="为什么要用红黑树"><a href="#为什么要用红黑树" class="headerlink" title="为什么要用红黑树"></a>为什么要用红黑树</h3><p>普通的二叉树可能会由于倾斜，造成一些操作达到O(n)时间，但对于红黑树来说，红黑树会保证高度永远为O(logn)，所以它的操作的复杂度也会保持在O(logn)</p><h3 id="对比AVL树"><a href="#对比AVL树" class="headerlink" title="对比AVL树"></a>对比AVL树</h3><p>AVL树是带有平衡条件的二叉搜索树，每个节点的左右子树的高度差小于等于1。为了保持平衡条件，在插入和删除操作中会产生旋转操作。</p><p>所以如果要频繁地做插入和删除操作，红黑树会更好。</p><p>如果查找比较频繁，AVL树会更好。</p><h2 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h2><p>B树首先是一个自平衡的搜索树。当有大量数据要读取时，主存不够用，需要从硬盘中读取数据。为了减少硬盘的访问次数，大部分的树操作需要O(h)次硬盘访问。</p><p>而B树很宽，可以尽可能地放入key来降低高度，通常B树的节点大小等于硬盘的block大小。因此高度降低了，总的硬盘访问次数就要比AVL、红黑树少。</p><h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><ul><li>所有的叶子节点都在同一高度</li><li>一个B树由最小度t来定义，t的值取决于硬盘的block大小</li><li>除了根以外的节点，都必须要包含至少t-1个key，根可以只有一个key</li><li>所有的节点可能包含最多2t-1个key</li><li>一个节点的子节点数量等于它自身的key的数量加一</li><li>一个节点的所有key递增排序。在两个key，k1和k2之间的子节点包含了所有在k1和k2范围内的所有key</li><li>B树从根变大或缩小。BST则可以向下变大或缩小(B-Tree grows and shrinks from the root which is unlike Binary Search Tree. Binary Search Trees grow downward and also shrink from downward.)</li><li>与其他BST一样，查找、插入、删除的复杂度为O(logn)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;二叉搜索树&quot;&gt;&lt;a href=&quot;#二叉搜索树&quot; class=&quot;headerlink&quot; title=&quot;二叉搜索树&quot;&gt;&lt;/a&gt;二叉搜索树&lt;/h2&gt;&lt;h3 id=&quot;属性&quot;&gt;&lt;a href=&quot;#属性&quot; class=&quot;headerlink&quot; title=&quot;属性&quot;&gt;&lt;/a&gt;属
      
    
    </summary>
    
    
    
      <category term="二叉树" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>基础算法-排序</title>
    <link href="http://yoursite.com/2020/01/23/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2020/01/23/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-%E6%8E%92%E5%BA%8F/</id>
    <published>2020-01-22T16:50:06.000Z</published>
    <updated>2020-01-23T08:58:15.678Z</updated>
    
    <content type="html"><![CDATA[<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>冒泡排序的交换是比较<strong>相邻两个元素</strong>的大小后再进行交换,<strong>最大的数会冒泡到最后面去</strong>。</p><p>复杂度：O(n²)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;n-i<span class="number">-1</span>;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[j]&gt;nums[j+<span class="number">1</span>])</span><br><span class="line">            swap(nums[j],nums[j+<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>选择排序就是找最小值，然后放在最前面。</p><p>复杂度：O(n²)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)    <span class="comment">//i在这里相当于慢指针，确定放置的位置</span></span><br><span class="line">&#123;</span><br><span class="line">    min_idx = i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>;j&lt;n;j++)    <span class="comment">//j在这里相当于快指针，寻找最小值</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[min_idx]&gt;nums[j])   <span class="comment">//位置j的数值更小，更新最小值位置</span></span><br><span class="line">            min_idx = j;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(nums[min_idx],nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>选取一个数将这个数插入到有序部分，插入时只需要移动有序部分。</p><p>复杂度：O(n²)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    key = nums[i];</span><br><span class="line">    j = i - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//由这个判定条件来将有序部分后移</span></span><br><span class="line">    <span class="comment">//直到找到了一个比要搬运的数值要小的数，就可以插入了</span></span><br><span class="line">    <span class="keyword">while</span>(j &gt;= <span class="number">0</span> &amp;&amp; nums[j] &gt; key)  </span><br><span class="line">    &#123;</span><br><span class="line">        nums[j+<span class="number">1</span>] = nums[j];</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line">    nums[j+<span class="number">1</span>] = key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>采用了分治法的思想，将数组不断分割成前后两部分，每个部分再进行合并排序。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span> nums[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l+(r-l)/<span class="number">2</span>;</span><br><span class="line">        mergeSort(nums,l,mid);  <span class="comment">//进行分割</span></span><br><span class="line">        mergeSort(nums,mid+<span class="number">1</span>,r);</span><br><span class="line"></span><br><span class="line">        merge(nums,l,mid,r);    <span class="comment">//此处进行合并</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> nums[], <span class="keyword">int</span> l, <span class="keyword">int</span> mid, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//我们需要复制一下要合并的数组的部分</span></span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">int</span> n1 = m - l + <span class="number">1</span>; <span class="comment">//左边数组的长度</span></span><br><span class="line">    <span class="keyword">int</span> n2 = r-m;       <span class="comment">//右边数组的长度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> L[n1],R[n2];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//复制左边与右边的数组</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;n1; i++)</span><br><span class="line">        L[i] = nums[l + i];</span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>; j&lt;n2; j++)</span><br><span class="line">        R[j] = nums[m + <span class="number">1</span> + j];</span><br><span class="line"></span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    j = <span class="number">0</span>;</span><br><span class="line">    k = l;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(i &lt; n1 &amp;&amp; j &lt; n2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(L[i] &lt;= R[j])</span><br><span class="line">        &#123;</span><br><span class="line">            nums[k] = L[i];</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            nums[k] = R[j];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt; n1) </span><br><span class="line">    &#123; </span><br><span class="line">        arr[k] = L[i]; </span><br><span class="line">        i++; </span><br><span class="line">        k++; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (j &lt; n2) </span><br><span class="line">    &#123; </span><br><span class="line">        arr[k] = R[j]; </span><br><span class="line">        j++; </span><br><span class="line">        k++; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h2&gt;&lt;p&gt;冒泡排序的交换是比较&lt;strong&gt;相邻两个元素&lt;/strong&gt;的大小后再进行交换,&lt;strong&gt;最大的数会冒泡到最后面
      
    
    </summary>
    
    
    
      <category term="基础算法" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-反转链表的递归方法</title>
    <link href="http://yoursite.com/2020/01/22/Leetcode-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8%E7%9A%84%E9%80%92%E5%BD%92%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2020/01/22/Leetcode-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8%E7%9A%84%E9%80%92%E5%BD%92%E6%96%B9%E6%B3%95/</id>
    <published>2020-01-22T09:59:47.000Z</published>
    <updated>2020-01-22T16:37:03.826Z</updated>
    
    <content type="html"><![CDATA[<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先链表的反转是必须要当前节点的前一个节点，在递归中是没有办法从头开始递归反转的，只能递归到末尾再开始反转</p><p>用递归来反转链表，会产生栈，也就是说，我们是将每个节点从前往后存储到栈中，然后再一个一个拿出来反转，所以我们需要利用递归，先找到末尾节点，然后递归返回后从末尾节点的前一个节点开始反转。</p><p>链表的反向输出也是这个道理，反向输出代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printList</span><span class="params">(ListNode* head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    printList(head-&gt;next);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; head-&gt;val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Base-Case"><a href="#Base-Case" class="headerlink" title="Base Case"></a>Base Case</h3><p>只有一个或零个节点时直接返回</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">reverse</span><span class="params">(ListNode* head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head==<span class="literal">NULL</span>||head-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="末尾节点"><a href="#末尾节点" class="headerlink" title="末尾节点"></a>末尾节点</h3><p>利用Base Case取得末尾节点</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">reverse</span><span class="params">(ListNode* head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head==<span class="literal">NULL</span>||head-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    ListNode* p = reverse(head-&gt;next);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反转"><a href="#反转" class="headerlink" title="反转"></a>反转</h3><p>反转需要末尾节点的前一个节点，而指针p第一次被初始化时，调用产生的栈的栈顶元素就是末尾节点的前一个节点，那么我们有了这个前置节点时，就可以写出如下的反转代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head-&gt;next-&gt;next = head;</span><br></pre></td></tr></table></figure><p>此时的head为末尾节点的前一个节点,head-&gt;next为末尾节点的指针，将末尾节点的next指针指向当前的这个节点。</p><p>于是全部代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode* <span class="title">reverse</span><span class="params">(ListNode* head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">NULL</span> || head-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> head;</span><br><span class="line">ListNode* p = reverse(head-&gt;next);</span><br><span class="line">head-&gt;next-&gt;next = head;</span><br><span class="line"></span><br><span class="line">    head-&gt;next = <span class="literal">NULL</span>;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head-&gt;next = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p>这一行是为了消除一开始从前向后的next指向，如果不消除，将会在初始链表的头结点处产生环，对其他节点是没有影响的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;p&gt;首先链表的反转是必须要当前节点的前一个节点，在递归中是没有办法从头开始递归反转的，只能递归到末尾再开始反转&lt;/p&gt;
&lt;p&gt;用递归来反转链表，
      
    
    </summary>
    
    
    
      <category term="Leetcode简单题" scheme="http://yoursite.com/tags/Leetcode%E7%AE%80%E5%8D%95%E9%A2%98/"/>
    
      <category term="Leetcode链表题" scheme="http://yoursite.com/tags/Leetcode%E9%93%BE%E8%A1%A8%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>c++ const与指针</title>
    <link href="http://yoursite.com/2020/01/14/c++%20const%E4%B8%8E%E6%8C%87%E9%92%88/"/>
    <id>http://yoursite.com/2020/01/14/c++%20const%E4%B8%8E%E6%8C%87%E9%92%88/</id>
    <published>2020-01-14T13:31:57.000Z</published>
    <updated>2020-01-22T16:37:10.093Z</updated>
    
    <content type="html"><![CDATA[<h2 id="指向常量的指针-Pointer-to-const-value"><a href="#指向常量的指针-Pointer-to-const-value" class="headerlink" title="指向常量的指针(Pointer to const value)"></a>指向常量的指针(Pointer to const value)</h2><p>const int* ptr 为指向常量的指针，可以用常量赋值，也可以用非常量赋值，但是赋值后，会将所赋值的变量视为常量，<em>重点在于该指针无法修改</em> <strong>指向的变量的内容</strong></p><h2 id="常量指针-Constant-pointers"><a href="#常量指针-Constant-pointers" class="headerlink" title="常量指针(Constant pointers)"></a>常量指针(Constant pointers)</h2><p>int* const ptr为常量指针，该指针被初始化后，<strong>无法</strong>再改变它<strong>所指向的地址</strong>，但还是可以像一个正常的指针一样，<strong>可以修改指向的变量的内容的</strong>。</p><h2 id="指向常量的常量指针-Const-pointer-to-a-const-value"><a href="#指向常量的常量指针-Const-pointer-to-a-const-value" class="headerlink" title="指向常量的常量指针(Const pointer to a const value)"></a>指向常量的常量指针(Const pointer to a const value)</h2><p>const int* const ptr</p><p>上面二者的综合</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>只要*号紧靠左边写就很好读了。</p><p>T* ptr表示ptr为指向变量类型为T的指针，再根据const的位置判断。</p><p>如果const 在T*的左边，说明const修饰的是T，即指向的变量为常量。</p><p>如果const 在T*的右边，直接读成 const ptr，说明const修饰的是ptr，即指针是常量。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;指向常量的指针-Pointer-to-const-value&quot;&gt;&lt;a href=&quot;#指向常量的指针-Pointer-to-const-value&quot; class=&quot;headerlink&quot; title=&quot;指向常量的指针(Pointer to const value)&quot;
      
    
    </summary>
    
    
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-移动零与移除元素</title>
    <link href="http://yoursite.com/2020/01/14/Leetcode-%E7%A7%BB%E5%8A%A8%E9%9B%B6%E4%B8%8E%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/"/>
    <id>http://yoursite.com/2020/01/14/Leetcode-%E7%A7%BB%E5%8A%A8%E9%9B%B6%E4%B8%8E%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</id>
    <published>2020-01-14T13:06:34.000Z</published>
    <updated>2020-01-22T16:37:02.747Z</updated>
    
    <content type="html"><![CDATA[<h2 id="移动零"><a href="#移动零" class="headerlink" title="移动零"></a>移动零</h2><p><a href="https://leetcode-cn.com/problems/move-zeroes/" target="_blank" rel="noopener">题目</a></p><p>给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。</p><pre><code>示例:输入: [0,1,0,3,12]输出: [1,3,12,0,0]</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lastNum = <span class="number">0</span>;    <span class="comment">//慢指针确定搬运的位置</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;nums.size();i++)    <span class="comment">//快指针搜索符合条件的数值的位置</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            nums[lastNum] = nums[i];</span><br><span class="line">            lastNum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = lastNum;i&lt;nums.size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        nums[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h2><p><a href="https://leetcode-cn.com/problems/remove-element/" target="_blank" rel="noopener">题目</a></p><p>给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><pre><code>nums = [3,2,2,3], val = 3,函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。</code></pre><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> loc = <span class="number">0</span>;    <span class="comment">//慢指针确定要搬运的位置</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;nums.size();i++)    <span class="comment">//i为快指针用于搜索符合条件的数值的位置</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]!=val)</span><br><span class="line">        &#123;</span><br><span class="line">            nums[loc] = nums[i];</span><br><span class="line">            loc++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> loc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这两道题比较像，所以放在一起记了，共同点是都利用了双指针，一个快指针一个慢指针，快指针用于搜索符合条件的数值的位置，慢指针用于确定数字要搬运的位置。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;移动零&quot;&gt;&lt;a href=&quot;#移动零&quot; class=&quot;headerlink&quot; title=&quot;移动零&quot;&gt;&lt;/a&gt;移动零&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/move-zeroes/&quot; target=&quot;_b
      
    
    </summary>
    
    
    
      <category term="Leetcode简单题" scheme="http://yoursite.com/tags/Leetcode%E7%AE%80%E5%8D%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>c++ static关键字</title>
    <link href="http://yoursite.com/2020/01/11/c++%20static%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    <id>http://yoursite.com/2020/01/11/c++%20static%E5%85%B3%E9%94%AE%E5%AD%97/</id>
    <published>2020-01-11T08:57:15.000Z</published>
    <updated>2020-01-11T09:34:34.230Z</updated>
    
    <content type="html"><![CDATA[<p>摘抄至<a href="https://www.geeksforgeeks.org/static-keyword-cpp/" target="_blank" rel="noopener">geeksforgeeks</a></p><h2 id="函数中的静态变量"><a href="#函数中的静态变量" class="headerlink" title="函数中的静态变量"></a>函数中的静态变量</h2><p>当一个变量被声明为静态的时，它的空间就会被分配持续整个程序的生命周期</p><p>即使该函数被调用多次，静态变量的空间也只会被分配一次，并且该静态变量的值会一直持续到下一次函数调用</p><p>在实现协程或其他需要保存函数之前的状态的应用时会很有用</p><h2 id="类中的静态变量"><a href="#类中的静态变量" class="headerlink" title="类中的静态变量"></a>类中的静态变量</h2><p>当这些静态变量被分配了静态的存储空间后，他们只会被初始化一次</p><p>同一个类中的静态变量会被该类的所有实例共享</p><p>所以不会有不同实例对象有着不同的静态变量的值</p><p>并且由于这个原因，该静态变量不能够被构造器初始化(因为构造器构造的是实例对象，实例对象是共享的这些静态变量)</p><p>所以，类中的静态变量应该被用户，使用类名与范围解析运算符，显式地初始化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GfG</span> </span></span><br><span class="line"><span class="class">&#123;</span> </span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i; </span><br><span class="line">      </span><br><span class="line">    GfG() </span><br><span class="line">    &#123; </span><br><span class="line">        <span class="comment">// Do nothing </span></span><br><span class="line">    &#125;; </span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="comment">//在这里初始化</span></span><br><span class="line"><span class="keyword">int</span> GfG::i = <span class="number">1</span>; </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    GfG obj; </span><br><span class="line">    <span class="comment">// prints value of i </span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; obj.i;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类的静态实例"><a href="#类的静态实例" class="headerlink" title="类的静态实例"></a>类的静态实例</h2><p>与静态变量一样，初始化后会在整个程序的生命周期存在</p><h2 id="类中的静态函数"><a href="#类中的静态函数" class="headerlink" title="类中的静态函数"></a>类中的静态函数</h2><p>静态成员函数只允许访问静态变量或其他的静态函数</p><p>可以被类直接引用，无需实例对象引用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;摘抄至&lt;a href=&quot;https://www.geeksforgeeks.org/static-keyword-cpp/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;geeksforgeeks&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;函数中的静态变量&quot;&gt;&lt;a 
      
    
    </summary>
    
    
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>c++ 迭代器</title>
    <link href="http://yoursite.com/2020/01/11/c++%20%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <id>http://yoursite.com/2020/01/11/c++%20%E8%BF%AD%E4%BB%A3%E5%99%A8/</id>
    <published>2020-01-11T06:46:02.000Z</published>
    <updated>2020-01-11T08:36:55.648Z</updated>
    
    <content type="html"><![CDATA[<p>摘抄于<a href="https://www.geeksforgeeks.org/iterators-c-stl/" target="_blank" rel="noopener">geeksforgeeks</a></p><p>迭代器用于指向<strong>STL容器</strong>的<strong>内存地址</strong>(类似于指针)</p><p>减少程序的复杂度和执行时间</p><h2 id="迭代器操作"><a href="#迭代器操作" class="headerlink" title="迭代器操作"></a>迭代器操作</h2><h3 id="begin"><a href="#begin" class="headerlink" title="begin()"></a>begin()</h3><p>用于返回容器的开始位置</p><h3 id="end"><a href="#end" class="headerlink" title="end()"></a>end()</h3><p>用于返回容器的结束位置的后一个位置</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化容器</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ar = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="comment">//声明容器的迭代器</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator ptr;</span><br><span class="line"><span class="comment">//遍历输出</span></span><br><span class="line"><span class="keyword">for</span>(ptr = ar.begin(); ptr &lt; ar.end(); ptr++)</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; *ptr &lt;&lt; <span class="string">" "</span>;     <span class="comment">//由于迭代器和指针类似，指向内存地址，需要解引用</span></span><br></pre></td></tr></table></figure><h3 id="advance"><a href="#advance" class="headerlink" title="advance()"></a>advance()</h3><p>用于增加迭代器位置</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ar = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator ptr = ar.begin();</span><br><span class="line"></span><br><span class="line">advance(ptr,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*ptr; <span class="comment">//结果为4</span></span><br></pre></td></tr></table></figure><h3 id="next"><a href="#next" class="headerlink" title="next()"></a>next()</h3><p>用于返回一个<strong>新的迭代器</strong>，将指向参数中提到的位置</p><h3 id="prev"><a href="#prev" class="headerlink" title="prev()"></a>prev()</h3><p>用于返回一个<strong>新的迭代器</strong>，将指向参数中指向的位置</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ar = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator ptr = ar.begin(); <span class="comment">//指向1</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator ftr = ar.end();   <span class="comment">//指向5后面的内存地址</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> it1 = next(ptr,<span class="number">3</span>); <span class="comment">//指向4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> it2 = prev(ftr,<span class="number">3</span>); <span class="comment">//将指向3</span></span><br></pre></td></tr></table></figure><h3 id="inserter"><a href="#inserter" class="headerlink" title="inserter()"></a>inserter()</h3><p>构建一个插入迭代器，指向要插入的结点</p><p>接受两个参数</p><ol><li>容器</li><li>元素要插入的位置的迭代器</li></ol><p>与copy函数搭配使用</p><h3 id="copy"><a href="#copy" class="headerlink" title="copy()"></a>copy()</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy(strt_iter1, end_iter1, strt_iter2);</span><br></pre></td></tr></table></figure><ul><li>strt_iter1：指向源容器的开始位置，开始复制的元素的位置</li><li>end_iter1：容器的结束位置，结束复制的元素位置的后一位</li><li>strt_iter2：目标容器的位置，元素复制的<strong>目标</strong>位置的前面</li><li>结果：将strt_iter1 到 end_iter1这一段元素 复制到strt_iter2位置的前面</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ar = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;; </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ar1 = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;;  </span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator ptr = ar.begin(); </span><br><span class="line"></span><br><span class="line"><span class="comment">//ptr指向ar中的4     </span></span><br><span class="line">advance(ptr, <span class="number">3</span>); </span><br><span class="line">      </span><br><span class="line"><span class="comment">// inserter返回ptr指向的ar中的位置 </span></span><br><span class="line"><span class="comment">// 将ar1复制到inserter指向的位置的前面</span></span><br><span class="line">copy(ar1.begin(), ar1.end(), inserter(ar,ptr)); </span><br><span class="line">      </span><br><span class="line"><span class="comment">// Displaying new vector elements </span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"The new vector after inserting elements is : "</span>; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> &amp;x : ar)  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">" "</span>; <span class="comment">//输出 1 2 3 10 20 30 4 5</span></span><br><span class="line">      </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;摘抄于&lt;a href=&quot;https://www.geeksforgeeks.org/iterators-c-stl/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;geeksforgeeks&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;迭代器用于指向&lt;strong&gt;STL容器&lt;
      
    
    </summary>
    
    
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>c++ I/O</title>
    <link href="http://yoursite.com/2020/01/11/c++%20I-O/"/>
    <id>http://yoursite.com/2020/01/11/c++%20I-O/</id>
    <published>2020-01-11T06:05:37.000Z</published>
    <updated>2020-01-11T07:28:00.727Z</updated>
    
    <content type="html"><![CDATA[<p>摘抄于 <a href="https://www.geeksforgeeks.org/basic-input-output-c/" target="_blank" rel="noopener">geeksforgeeks</a></p><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><h3 id="iostream"><a href="#iostream" class="headerlink" title="iostream"></a>iostream</h3><ul><li>用于标准的输入输出流</li><li>包含了cin,cout,cerr函数</li></ul><h3 id="iomanip"><a href="#iomanip" class="headerlink" title="iomanip"></a>iomanip</h3><ul><li>I/O manipulators</li><li>用于操作流的输出</li><li>包含了setw, setprecision函数</li></ul><h3 id="fstream"><a href="#fstream" class="headerlink" title="fstream"></a>fstream</h3><ul><li>用于文件流 file stream</li><li>用于处理从文件中作为input，读入数据</li><li>也可用于写入文件作为ouput</li></ul><h4 id="cerr"><a href="#cerr" class="headerlink" title="cerr"></a>cerr</h4><ul><li>不经过缓存的标准错误流</li><li>用于输出错误，同时也是一个ostream类的实例</li><li>当需要立即展示错误信息时可以使用这个函数</li></ul><h4 id="clog"><a href="#clog" class="headerlink" title="clog"></a>clog</h4><ul><li>经过缓存的错误流</li><li>也是一个iostream类的实例，用于输出错误</li><li>但与cerr不同的是，错误会首先插入到缓存中，并且存储在缓存中直到缓存被充满为止后放出。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;摘抄于 &lt;a href=&quot;https://www.geeksforgeeks.org/basic-input-output-c/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;geeksforgeeks&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;头文件&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
    
      <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>基础算法-二叉树遍历</title>
    <link href="http://yoursite.com/2020/01/07/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/"/>
    <id>http://yoursite.com/2020/01/07/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/</id>
    <published>2020-01-07T12:02:01.000Z</published>
    <updated>2020-01-23T08:58:16.311Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉树的前序遍历"><a href="#二叉树的前序遍历" class="headerlink" title="二叉树的前序遍历"></a>二叉树的前序遍历</h2><h3 id="递归方法"><a href="#递归方法" class="headerlink" title="递归方法"></a>递归方法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorderRecursive</span><span class="params">(TreeNode* root)</span> </span>&#123;<span class="comment">//先访问根，然后访问子树</span></span><br><span class="line"><span class="keyword">if</span>(root == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; root-&gt;val&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (root-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">preorderRecursive(root-&gt;left);</span><br><span class="line"><span class="keyword">if</span> (root-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">preorderRecursive(root-&gt;right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栈的迭代方法"><a href="#栈的迭代方法" class="headerlink" title="栈的迭代方法"></a>栈的迭代方法</h3><ol><li>初始化：引入一个栈，先将根结点放进栈内</li><li>开始循环，直到栈为空：<ol><li>每次弹出栈顶元素，对栈顶元素进行操作</li><li>如果该元素有<strong>右</strong>子结点，将右子结点放入栈内</li><li>如果该元素有<strong>左</strong>子结点，将左子结点放入栈内</li></ol></li></ol><p>其实这个方法跟递归中产生的栈是同样效果</p><p>递归中先调用左子结点，再调用右子结点，这样先给左子结点产生帧栈，等左子结点的调用全部结束，再调用右子结点。</p><p>迭代中是将右子结点先放入栈中，左子结点后放入栈中，先处理左子结点的帧栈，在处理右子结点。</p><p>总之就是自己引入了一个栈，用于模拟函数调用时的栈。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preorder</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(root == <span class="literal">NULL</span>)<span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span>&lt;TreeNode*&gt; s;</span><br><span class="line">s.push(root);</span><br><span class="line"><span class="keyword">while</span> (!s.empty())</span><br><span class="line">&#123;</span><br><span class="line">TreeNode* node = s.top();</span><br><span class="line">s.pop();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; node-&gt;val;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (node-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">s.push(node-&gt;right);</span><br><span class="line"><span class="keyword">if</span> (node-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">s.push(node-&gt;left);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树的中序遍历"><a href="#二叉树的中序遍历" class="headerlink" title="二叉树的中序遍历"></a>二叉树的中序遍历</h2><h3 id="递归方法-1"><a href="#递归方法-1" class="headerlink" title="递归方法"></a>递归方法</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorderRecursive</span><span class="params">(TreeNode* root)</span></span>&#123;<span class="comment">//先访问左(右)子树，然后访问根，再访问另一个子树</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (root-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">inorderRecursive(root-&gt;left);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; root-&gt;val &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (root-&gt;right != <span class="literal">NULL</span>)</span><br><span class="line">inorderRecursive(root-&gt;right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栈的迭代方法-1"><a href="#栈的迭代方法-1" class="headerlink" title="栈的迭代方法"></a>栈的迭代方法</h3><p>同样的，这里的栈也是对函数调用时产生的栈的模拟</p><ol><li>压入当前结点，并<strong>优先向左结点</strong>移动，即递归中的对左结点函数调用</li><li>当前结点为空时，即可对当前结点进行操作，即递归中的输出</li><li><strong>操作后，应该向右结点移动</strong>，即递归中对右结点的函数调用</li><li>当 <strong>当前结点为空</strong>且<strong>栈为空时</strong>才会退出，与递归的结束时的程序状态是一致的。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inorder</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">stack</span>&lt;TreeNode*&gt; s;</span><br><span class="line">TreeNode* cur = root;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (cur != <span class="literal">NULL</span>)<span class="comment">//左右结点的入栈操作</span></span><br><span class="line">&#123;</span><br><span class="line">s.push(cur);</span><br><span class="line">cur = cur-&gt;left;<span class="comment">//优先让左结点入栈</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>    <span class="comment">//当cur为空时，需要对栈顶元素进行操作，并转移到右结点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (s.empty() == <span class="literal">true</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对中间的结点进行操作</span></span><br><span class="line">cur = s.top();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; cur-&gt;val;</span><br><span class="line"></span><br><span class="line">s.pop();<span class="comment">//操作后出栈</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//操作完后转移到右结点</span></span><br><span class="line">cur = cur-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树的后序遍历"><a href="#二叉树的后序遍历" class="headerlink" title="二叉树的后序遍历"></a>二叉树的后序遍历</h2><h3 id="递归方法-2"><a href="#递归方法-2" class="headerlink" title="递归方法"></a>递归方法</h3><h3 id="栈的迭代方法-2"><a href="#栈的迭代方法-2" class="headerlink" title="栈的迭代方法"></a>栈的迭代方法</h3><p>为了跟中序遍历的写法一致一些，写的比较麻烦</p><p>思想同样是模拟函数调用时产生的栈</p><p>后序遍历时，一定会优先访问左结点，到达非叶子结点的某个中间结点时，我们<strong>只需检测该中间结点的右结点是否被访问过</strong>，以此来判断是否要将该中间结点输出并出栈。</p><ol><li>将<strong>左结点或右结点</strong>进行入栈，并为了记录访问过的结点，增加了一个集合，集合必须初始化放入NULL</li><li>当左右结点都为空时，获取栈顶元素<ol><li>while循环检测栈顶元素的<strong>右结点</strong>是否被访问过<ol><li>若<strong>被访问过</strong>，则将该栈顶元素操作并弹出，并更新栈顶元素，继续循环<ol><li>若弹出后，栈为空则返回结果</li></ol></li><li>若<strong>没有被访问过</strong>，则向栈顶元素的右结点移动</li></ol></li></ol></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">postorder</span><span class="params">(TreeNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">stack</span>&lt;TreeNode* &gt; s;</span><br><span class="line"><span class="built_in">set</span>&lt;TreeNode*&gt; treeSet;</span><br><span class="line">treeSet.insert(<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">TreeNode* cur = root;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (cur != <span class="literal">NULL</span>)<span class="comment">//模拟左右结点的入栈，并记录访问过的结点</span></span><br><span class="line">&#123;</span><br><span class="line">s.push(cur);</span><br><span class="line">treeSet.insert(cur);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cur-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">cur = cur-&gt;left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//这里不能写else if</span></span><br><span class="line"><span class="comment">//如果右结点也为空的话，在下一次循环中会直接走到大判断中的else，以此获取中间结点。</span></span><br><span class="line">cur = cur-&gt;right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;<span class="comment">//得到中间结点，进行操作</span></span><br><span class="line">cur = s.top();<span class="comment">//当前结点更新到栈顶元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//只需判断当前结点的右结点是否被访问过，因为左结点肯定被访问了</span></span><br><span class="line"><span class="comment">//若右结点也被访问过，说明已经到了后序遍历的左右中的中结点了，需要操作输出。</span></span><br><span class="line"><span class="keyword">while</span> (treeSet.find(cur-&gt;right) != treeSet.end())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; cur-&gt;val;<span class="comment">//左右结点均被访问，输出该结点</span></span><br><span class="line">s.pop();<span class="comment">//将该结点弹出</span></span><br><span class="line"><span class="keyword">if</span> (s.empty() == <span class="literal">true</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">cur = s.top();<span class="comment">//当前结点更新到栈顶元素</span></span><br><span class="line">&#125;</span><br><span class="line">cur = cur-&gt;right;<span class="comment">//此时栈顶元素为中间结点，需要向右结点移动</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;二叉树的前序遍历&quot;&gt;&lt;a href=&quot;#二叉树的前序遍历&quot; class=&quot;headerlink&quot; title=&quot;二叉树的前序遍历&quot;&gt;&lt;/a&gt;二叉树的前序遍历&lt;/h2&gt;&lt;h3 id=&quot;递归方法&quot;&gt;&lt;a href=&quot;#递归方法&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
    
      <category term="基础算法 - 二叉树" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-环形链表与相交链表</title>
    <link href="http://yoursite.com/2020/01/06/Leetcode-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%E4%B8%8E%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2020/01/06/Leetcode-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%E4%B8%8E%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</id>
    <published>2020-01-06T08:53:12.000Z</published>
    <updated>2020-01-06T09:22:59.730Z</updated>
    
    <content type="html"><![CDATA[<p>两道题都用了双指针走的路径长度是否相等来解决，所以记录一下。</p><h1 id="环形链表"><a href="#环形链表" class="headerlink" title="环形链表"></a>环形链表</h1><p><a href="https://leetcode-cn.com/problems/linked-list-cycle/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/linked-list-cycle/</a></p><p>给定一个链表，判断链表中是否有环。</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist_test2.png" alt="环形链表示意图"></p><h2 id="方法一-哈希表"><a href="#方法一-哈希表" class="headerlink" title="方法一(哈希表)"></a>方法一(哈希表)</h2><ol><li>遍历链表，将所有节点的地址记录到哈希表中</li><li>若存在环，则哈希表中会有对应的地址</li><li>若不存在环，会遍历到NULL位置</li></ol><h2 id="方法二-快慢指针"><a href="#方法二-快慢指针" class="headerlink" title="方法二(快慢指针)"></a>方法二(快慢指针)</h2><ol><li>利用两个指针，slow和fast</li><li>slow指针每次只走一步，fast指针每次走两步</li><li>若存在环，则fast指针必定能追上slow指针</li><li>若不存在环，fast指针会走到NULL位置</li></ol><h1 id="相交链表"><a href="#相交链表" class="headerlink" title="相交链表"></a>相交链表</h1><p><a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/intersection-of-two-linked-lists/</a></p><p>编写一个程序，找到两个单链表相交的起始节点。</p><p><img src="https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png" alt="相交链表示意图"></p><h2 id="方法一-暴力遍历"><a href="#方法一-暴力遍历" class="headerlink" title="方法一(暴力遍历)"></a>方法一(暴力遍历)</h2><ol><li>类似于双层for循环，只要找到相等的地址即可</li></ol><h2 id="方法二-哈希表"><a href="#方法二-哈希表" class="headerlink" title="方法二(哈希表)"></a>方法二(哈希表)</h2><ol><li>如环形链表一样，遍历两个链表，将地址全部放入哈希表中</li><li>若相交，则哈希表中可以找到相等地址</li></ol><h2 id="方法三-双指针"><a href="#方法三-双指针" class="headerlink" title="方法三(双指针)"></a>方法三(双指针)</h2><p>看图容易理解</p><p>  <a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/solution/tu-jie-xiang-jiao-lian-biao-by-user7208t/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/intersection-of-two-linked-lists/solution/tu-jie-xiang-jiao-lian-biao-by-user7208t/</a></p><ol><li>将两个链表看成三块</li><li>链表A中分为 AX，C</li><li>链表B中分为 BX，C</li><li>C是两个链表中相交的部分</li><li>让两个指针PA、PB遍历A、B，走到NULL时，重新定向到B、A，继续遍历</li><li>若相交<ol><li>则有指针PA的路径 s1 = AX+C+BX</li><li>PB的路径 s2 = BX+C+AX</li><li>所以s1 = s2，与环形链表类似</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;两道题都用了双指针走的路径长度是否相等来解决，所以记录一下。&lt;/p&gt;
&lt;h1 id=&quot;环形链表&quot;&gt;&lt;a href=&quot;#环形链表&quot; class=&quot;headerlink&quot; title=&quot;环形链表&quot;&gt;&lt;/a&gt;环形链表&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcod
      
    
    </summary>
    
    
    
      <category term="Leetcode简单题" scheme="http://yoursite.com/tags/Leetcode%E7%AE%80%E5%8D%95%E9%A2%98/"/>
    
      <category term="Leetcode链表题" scheme="http://yoursite.com/tags/Leetcode%E9%93%BE%E8%A1%A8%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-链表</title>
    <link href="http://yoursite.com/2019/12/24/Leetcode-%E9%93%BE%E8%A1%A8%E9%A2%98/"/>
    <id>http://yoursite.com/2019/12/24/Leetcode-%E9%93%BE%E8%A1%A8%E9%A2%98/</id>
    <published>2019-12-24T11:43:14.000Z</published>
    <updated>2020-01-06T09:17:12.027Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Leetcode链表的定义"><a href="#Leetcode链表的定义" class="headerlink" title="Leetcode链表的定义"></a>Leetcode链表的定义</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode *next;</span><br><span class="line"></span><br><span class="line">    ListNode(<span class="keyword">int</span> x) : val(x), next(<span class="literal">NULL</span>) &#123;&#125; <span class="comment">//构造函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><ol><li><p>先获取指向整条链表的头指针</p><p> ListNode *head = new ListNode(-1);</p></li><li><p>定义一个遍历该链表的指针</p><p> ListNode *p = head;</p></li><li><p>用p来构造该链表，假设输入为 3-&gt;4-2</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">p-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"></span><br><span class="line">p-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"></span><br><span class="line">p-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">p = p-&gt;next;</span><br></pre></td></tr></table></figure><ol start="4"><li>调用函数修改指针时，用head指针作为实参代入</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Leetcode链表的定义&quot;&gt;&lt;a href=&quot;#Leetcode链表的定义&quot; class=&quot;headerlink&quot; title=&quot;Leetcode链表的定义&quot;&gt;&lt;/a&gt;Leetcode链表的定义&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;
      
    
    </summary>
    
    
    
      <category term="Leetcode链表题" scheme="http://yoursite.com/tags/Leetcode%E9%93%BE%E8%A1%A8%E9%A2%98/"/>
    
  </entry>
  
</feed>
