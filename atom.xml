<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Azure XH</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-06T09:17:43.875Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>AzureXH</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Leetcode-环形链表与相交链表</title>
    <link href="http://yoursite.com/2020/01/06/Leetcode-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%E4%B8%8E%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2020/01/06/Leetcode-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%E4%B8%8E%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</id>
    <published>2020-01-06T08:53:12.000Z</published>
    <updated>2020-01-06T09:17:43.875Z</updated>
    
    <content type="html"><![CDATA[<p>两道题都用了双指针走的路径长度是否相等来解决，所以记录一下。</p><h1 id="环形链表"><a href="#环形链表" class="headerlink" title="环形链表"></a>环形链表</h1><p>给定一个链表，判断链表中是否有环。</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/07/circularlinkedlist.png" alt="环形链表示意图"></p><h2 id="方法一-哈希表"><a href="#方法一-哈希表" class="headerlink" title="方法一(哈希表)"></a>方法一(哈希表)</h2><ol><li>遍历链表，将所有节点的地址记录到哈希表中</li><li>若存在环，则哈希表中会有对应的地址</li><li>若不存在环，会遍历到NULL位置</li></ol><h2 id="方法二-快慢指针"><a href="#方法二-快慢指针" class="headerlink" title="方法二(快慢指针)"></a>方法二(快慢指针)</h2><ol><li>利用两个指针，slow和fast</li><li>slow指针每次只走一步，fast指针每次走两步</li><li>若存在环，则fast指针必定能追上slow指针</li><li>若不存在环，fast指针会走到NULL位置</li></ol><h1 id="相交链表"><a href="#相交链表" class="headerlink" title="相交链表"></a>相交链表</h1><p>编写一个程序，找到两个单链表相交的起始节点。</p><p><img src="https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png" alt="相交链表示意图"></p><h2 id="方法一-暴力遍历"><a href="#方法一-暴力遍历" class="headerlink" title="方法一(暴力遍历)"></a>方法一(暴力遍历)</h2><ol><li>类似于双层for循环，只要找到相等的地址即可</li></ol><h2 id="方法二-哈希表"><a href="#方法二-哈希表" class="headerlink" title="方法二(哈希表)"></a>方法二(哈希表)</h2><ol><li>如环形链表一样，遍历两个链表，将地址全部放入哈希表中</li><li>若相交，则哈希表中可以找到相等地址</li></ol><h2 id="方法三-双指针"><a href="#方法三-双指针" class="headerlink" title="方法三(双指针)"></a>方法三(双指针)</h2><p>看图容易理解</p><p>  <a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/solution/tu-jie-xiang-jiao-lian-biao-by-user7208t/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/intersection-of-two-linked-lists/solution/tu-jie-xiang-jiao-lian-biao-by-user7208t/</a></p><ol><li>将两个链表看成三块</li><li>链表A中分为 AX，C</li><li>链表B中分为 BX，C</li><li>C是两个链表中相交的部分</li><li>让两个指针遍历</li><li>若相交<ol><li>则有指针PA的路径 s1 = AX+C+BX</li><li>PB的路径 s2 = BX+C+AX</li><li>所以s1 = s2，与环形链表类似</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;两道题都用了双指针走的路径长度是否相等来解决，所以记录一下。&lt;/p&gt;
&lt;h1 id=&quot;环形链表&quot;&gt;&lt;a href=&quot;#环形链表&quot; class=&quot;headerlink&quot; title=&quot;环形链表&quot;&gt;&lt;/a&gt;环形链表&lt;/h1&gt;&lt;p&gt;给定一个链表，判断链表中是否有环。&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
    
      <category term="Leetcode简单题" scheme="http://yoursite.com/tags/Leetcode%E7%AE%80%E5%8D%95%E9%A2%98/"/>
    
      <category term="Leetcode链表题" scheme="http://yoursite.com/tags/Leetcode%E9%93%BE%E8%A1%A8%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-链表</title>
    <link href="http://yoursite.com/2019/12/24/Leetcode-%E9%93%BE%E8%A1%A8%E9%A2%98/"/>
    <id>http://yoursite.com/2019/12/24/Leetcode-%E9%93%BE%E8%A1%A8%E9%A2%98/</id>
    <published>2019-12-24T11:43:14.000Z</published>
    <updated>2020-01-06T09:17:12.027Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Leetcode链表的定义"><a href="#Leetcode链表的定义" class="headerlink" title="Leetcode链表的定义"></a>Leetcode链表的定义</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode *next;</span><br><span class="line"></span><br><span class="line">    ListNode(<span class="keyword">int</span> x) : val(x), next(<span class="literal">NULL</span>) &#123;&#125; <span class="comment">//构造函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><ol><li><p>先获取指向整条链表的头指针</p><p> ListNode *head = new ListNode(-1);</p></li><li><p>定义一个遍历该链表的指针</p><p> ListNode *p = head;</p></li><li><p>用p来构造该链表，假设输入为 3-&gt;4-2</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">p-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"></span><br><span class="line">p-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line"></span><br><span class="line">p-&gt;next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">p = p-&gt;next;</span><br></pre></td></tr></table></figure><ol start="4"><li>调用函数修改指针时，用head指针作为实参代入</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Leetcode链表的定义&quot;&gt;&lt;a href=&quot;#Leetcode链表的定义&quot; class=&quot;headerlink&quot; title=&quot;Leetcode链表的定义&quot;&gt;&lt;/a&gt;Leetcode链表的定义&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;
      
    
    </summary>
    
    
    
      <category term="Leetcode链表题" scheme="http://yoursite.com/tags/Leetcode%E9%93%BE%E8%A1%A8%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-整数反转</title>
    <link href="http://yoursite.com/2019/12/23/Leetcode-7/"/>
    <id>http://yoursite.com/2019/12/23/Leetcode-7/</id>
    <published>2019-12-23T14:33:31.000Z</published>
    <updated>2020-01-06T09:05:39.958Z</updated>
    
    <content type="html"><![CDATA[<h1 id="整数反转"><a href="#整数反转" class="headerlink" title="整数反转"></a>整数反转</h1><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p><p>如果反转后整数溢出那么就返回 0。</p><ul><li><p>示例 1:</p><ul><li>输入: 123</li><li>输出: 321</li></ul></li><li><p>示例 2:</p><ul><li>输入: -123</li><li>输出: -321</li></ul></li><li><p>示例 3:</p><ul><li>输入: 120</li><li>输出: 21</li></ul></li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>将x模10得到尾数，result自乘10并加上这个尾数</p><p>重点在于处理溢出</p><p>溢出的原因在于result自乘10，可能产生正溢出，可能产生负溢出</p><p>那么反过来想result自乘10会正溢出，就说明正数最大值除以10是小于result的</p><p>负溢出同理</p><ul><li><p>比如正数最大为15</p><ul><li><p>result为5</p><ul><li>那么15/10 = 1 &lt; result，产生正溢出</li></ul></li></ul></li><li><p>正溢出</p><ul><li>在下一次构造result前，检查INT32_MAX/10是否比result要小</li></ul></li><li><p>负溢出</p><ul><li>在下一次构造result前，检查INT32_MIN/10是否比result要小</li></ul></li></ul><h2 id="解"><a href="#解" class="headerlink" title="解"></a>解</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">10</span>; x !=<span class="number">0</span>;)</span><br><span class="line">    &#123;</span><br><span class="line">      result = result * <span class="number">10</span> + x % i;</span><br><span class="line">      x = x / <span class="number">10</span>;</span><br><span class="line">      <span class="keyword">if</span> (x != <span class="number">0</span> &amp;&amp; result &gt; INT32_MAX / <span class="number">10</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (x != <span class="number">0</span> &amp;&amp; result &lt; INT32_MIN / <span class="number">10</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;整数反转&quot;&gt;&lt;a href=&quot;#整数反转&quot; class=&quot;headerlink&quot; title=&quot;整数反转&quot;&gt;&lt;/a&gt;整数反转&lt;/h1&gt;&lt;p&gt;给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。&lt;/p&gt;
&lt;p&gt;如果反转后整数溢出那么就返回 0。&lt;
      
    
    </summary>
    
    
    
      <category term="Leetcode简单题" scheme="http://yoursite.com/tags/Leetcode%E7%AE%80%E5%8D%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>unity学习-1</title>
    <link href="http://yoursite.com/2019/12/13/unity%E5%AD%A6%E4%B9%A0-1/"/>
    <id>http://yoursite.com/2019/12/13/unity%E5%AD%A6%E4%B9%A0-1/</id>
    <published>2019-12-13T12:32:39.000Z</published>
    <updated>2019-12-13T13:37:48.283Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://www.youtube.com/watch?v=XDAYS-qYe6Y" target="_blank" rel="noopener">从YouTube视频上抄的代码</a></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CubeMover</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//类似于JAVA中的注释，可以让被注释的属性在面板上设置</span></span><br><span class="line">    [<span class="meta">SerializeField</span>]  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> speed = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">float</span> horizontal = Input.GetAxis(<span class="string">"Horizontal"</span>);<span class="comment">//获取x轴输入</span></span><br><span class="line">        <span class="keyword">float</span> vertical = Input.GetAxis(<span class="string">"Vertical"</span>);<span class="comment">//获取y轴输入</span></span><br><span class="line"></span><br><span class="line">        Vector3 movement = <span class="keyword">new</span> Vector3(horizontal,vertical);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//transform是继承于MonoBehaviour的成员变量</span></span><br><span class="line">        <span class="comment">//为了控制速度需要用到Time.deltaTime</span></span><br><span class="line">        transform.position += movement * Time.deltaTime * speed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnCollisionEnter</span>(<span class="params">Collision collision</span>)</span>&#123; <span class="comment">//碰撞发生时</span></span><br><span class="line">        SceneManager.LoadScene(<span class="number">0</span>);  <span class="comment">//重新加载场景，需要引入SceneManager包</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Bomb</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//OnEnable需要与Start、Awake对比</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        Respawn();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (transform.position.y &lt; <span class="number">-10</span>)</span><br><span class="line">            Respawn();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Respawn</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">float</span> randomX = UnityEngine.Random.Range(<span class="number">-10</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">float</span> randomY = UnityEngine.Random.Range(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        transform.position = <span class="keyword">new</span> Vector3(randomX, randomY);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> rigidbody = GetComponent&lt;Rigidbody&gt;(); <span class="comment">//获取该物体所设置的组件 获取组件中的刚体</span></span><br><span class="line">        rigidbody.velocity = Vector3.zero;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>碰撞后可能会产生奇怪的光</p><p>需要设置-&gt;Window-&gt;lighting-&gt;Debug Setting-&gt;Auto Generate</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=XDAYS-qYe6Y&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;从YouTube视频上抄的代码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;
      
    
    </summary>
    
    
    
      <category term="unity" scheme="http://yoursite.com/tags/unity/"/>
    
  </entry>
  
</feed>
